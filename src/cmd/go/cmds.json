{
    "Name": "",
    "LongName": "",
    "UsageLine": "go",
    "Short": "",
    "Long": "Go is a tool for managing Go source code.",
    "Flags": null,
    "CustomFlags": false,
    "Commands": [
        {
            "Name": "bug",
            "LongName": "bug",
            "UsageLine": "go bug",
            "Short": "start a bug report",
            "Long": "\nBug opens the default browser and starts a new bug report.\nThe report includes useful system information.\n\t",
            "Flags": [
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "build",
            "LongName": "build",
            "UsageLine": "go build [-o output] [build flags] [packages]",
            "Short": "compile packages and dependencies",
            "Long": "\nBuild compiles the packages named by the import paths,\nalong with their dependencies, but it does not install the results.\n\nIf the arguments to build are a list of .go files from a single directory,\nbuild treats them as a list of source files specifying a single package.\n\nWhen compiling packages, build ignores files that end in '_test.go'.\n\nWhen compiling a single main package, build writes\nthe resulting executable to an output file named after\nthe first source file ('go build ed.go rx.go' writes 'ed' or 'ed.exe')\nor the source code directory ('go build unix/sam' writes 'sam' or 'sam.exe').\nThe '.exe' suffix is added when writing a Windows executable.\n\nWhen compiling multiple packages or a single non-main package,\nbuild compiles the packages but discards the resulting object,\nserving only as a check that the packages can be built.\n\nThe -o flag forces build to write the resulting executable or object\nto the named output file or directory, instead of the default behavior described\nin the last two paragraphs. If the named output is an existing directory or\nends with a slash or backslash, then any resulting executables\nwill be written to that directory.\n\nThe -i flag installs the packages that are dependencies of the target.\nThe -i flag is deprecated. Compiled packages are cached automatically.\n\nThe build flags are shared by the build, clean, get, install, list, run,\nand test commands:\n\n\t-a\n\t\tforce rebuilding of packages that are already up-to-date.\n\t-n\n\t\tprint the commands but do not run them.\n\t-p n\n\t\tthe number of programs, such as build commands or\n\t\ttest binaries, that can be run in parallel.\n\t\tThe default is GOMAXPROCS, normally the number of CPUs available.\n\t-race\n\t\tenable data race detection.\n\t\tSupported only on linux/amd64, freebsd/amd64, darwin/amd64, windows/amd64,\n\t\tlinux/ppc64le and linux/arm64 (only for 48-bit VMA).\n\t-msan\n\t\tenable interoperation with memory sanitizer.\n\t\tSupported only on linux/amd64, linux/arm64\n\t\tand only with Clang/LLVM as the host C compiler.\n\t\tOn linux/arm64, pie build mode will be used.\n\t-v\n\t\tprint the names of packages as they are compiled.\n\t-work\n\t\tprint the name of the temporary work directory and\n\t\tdo not delete it when exiting.\n\t-x\n\t\tprint the commands.\n\n\t-asmflags '[pattern=]arg list'\n\t\targuments to pass on each go tool asm invocation.\n\t-buildmode mode\n\t\tbuild mode to use. See 'go help buildmode' for more.\n\t-compiler name\n\t\tname of compiler to use, as in runtime.Compiler (gccgo or gc).\n\t-gccgoflags '[pattern=]arg list'\n\t\targuments to pass on each gccgo compiler/linker invocation.\n\t-gcflags '[pattern=]arg list'\n\t\targuments to pass on each go tool compile invocation.\n\t-installsuffix suffix\n\t\ta suffix to use in the name of the package installation directory,\n\t\tin order to keep output separate from default builds.\n\t\tIf using the -race flag, the install suffix is automatically set to race\n\t\tor, if set explicitly, has _race appended to it. Likewise for the -msan\n\t\tflag. Using a -buildmode option that requires non-default compile flags\n\t\thas a similar effect.\n\t-ldflags '[pattern=]arg list'\n\t\targuments to pass on each go tool link invocation.\n\t-linkshared\n\t\tbuild code that will be linked against shared libraries previously\n\t\tcreated with -buildmode=shared.\n\t-mod mode\n\t\tmodule download mode to use: readonly, vendor, or mod.\n\t\tBy default, if a vendor directory is present and the go version in go.mod\n\t\tis 1.14 or higher, the go command acts as if -mod=vendor were set.\n\t\tOtherwise, the go command acts as if -mod=readonly were set.\n\t\tSee https://golang.org/ref/mod#build-commands for details.\n\t-modcacherw\n\t\tleave newly-created directories in the module cache read-write\n\t\tinstead of making them read-only.\n\t-modfile file\n\t\tin module aware mode, read (and possibly write) an alternate go.mod\n\t\tfile instead of the one in the module root directory. A file named\n\t\t\"go.mod\" must still be present in order to determine the module root\n\t\tdirectory, but it is not accessed. When -modfile is specified, an\n\t\talternate go.sum file is also used: its path is derived from the\n\t\t-modfile flag by trimming the \".mod\" extension and appending \".sum\".\n\t-overlay file\n\t\tread a JSON config file that provides an overlay for build operations.\n\t\tThe file is a JSON struct with a single field, named 'Replace', that\n\t\tmaps each disk file path (a string) to its backing file path, so that\n\t\ta build will run as if the disk file path exists with the contents\n\t\tgiven by the backing file paths, or as if the disk file path does not\n\t\texist if its backing file path is empty. Support for the -overlay flag\n\t\thas some limitations: importantly, cgo files included from outside the\n\t\tinclude path must be in the same directory as the Go package they are\n\t\tincluded from, and overlays will not appear when binaries and tests are\n\t\trun through go run and go test respectively.\n\t-pkgdir dir\n\t\tinstall and load all packages from dir instead of the usual locations.\n\t\tFor example, when building with a non-standard configuration,\n\t\tuse -pkgdir to keep generated packages in a separate location.\n\t-tags tag,list\n\t\ta comma-separated list of build tags to consider satisfied during the\n\t\tbuild. For more information about build tags, see the description of\n\t\tbuild constraints in the documentation for the go/build package.\n\t\t(Earlier versions of Go used a space-separated list, and that form\n\t\tis deprecated but still recognized.)\n\t-trimpath\n\t\tremove all file system paths from the resulting executable.\n\t\tInstead of absolute file system paths, the recorded file names\n\t\twill begin with either \"go\" (for the standard library),\n\t\tor a module path@version (when using modules),\n\t\tor a plain import path (when using GOPATH).\n\t-toolexec 'cmd args'\n\t\ta program to use to invoke toolchain programs like vet and asm.\n\t\tFor example, instead of running asm, the go command will run\n\t\t'cmd args /path/to/asm \u003carguments for asm\u003e'.\n\t\tThe TOOLEXEC_IMPORTPATH environment variable will be set,\n\t\tmatching 'go list -f {{.ImportPath}}' for the package being built.\n\nThe -asmflags, -gccgoflags, -gcflags, and -ldflags flags accept a\nspace-separated list of arguments to pass to an underlying tool\nduring the build. To embed spaces in an element in the list, surround\nit with either single or double quotes. The argument list may be\npreceded by a package pattern and an equal sign, which restricts\nthe use of that argument list to the building of packages matching\nthat pattern (see 'go help packages' for a description of package\npatterns). Without a pattern, the argument list applies only to the\npackages named on the command line. The flags may be repeated\nwith different patterns in order to specify different arguments for\ndifferent sets of packages. If a package matches patterns given in\nmultiple flags, the latest match on the command line wins.\nFor example, 'go build -gcflags=-S fmt' prints the disassembly\nonly for package fmt, while 'go build -gcflags=all=-S fmt'\nprints the disassembly for fmt and all its dependencies.\n\nFor more about specifying packages, see 'go help packages'.\nFor more about where packages and binaries are installed,\nrun 'go help gopath'.\nFor more about calling between Go and C/C++, run 'go help c'.\n\nNote: Build adheres to certain conventions such as those described\nby 'go help gopath'. Not all projects can follow these conventions,\nhowever. Installations that have their own conventions or that use\na separate software build system may choose to use lower-level\ninvocations such as 'go tool compile' and 'go tool link' to avoid\nsome of the overheads and design decisions of the build tool.\n\nSee also: go install, go get, go clean.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "i",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "o",
                    "Usage": "output file or directory",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "clean",
            "LongName": "clean",
            "UsageLine": "go clean [clean flags] [build flags] [packages]",
            "Short": "remove object files and cached files",
            "Long": "\nClean removes object files from package source directories.\nThe go command builds most objects in a temporary directory,\nso go clean is mainly concerned with object files left by other\ntools or by manual invocations of go build.\n\nIf a package argument is given or the -i or -r flag is set,\nclean removes the following files from each of the\nsource directories corresponding to the import paths:\n\n\t_obj/            old object directory, left from Makefiles\n\t_test/           old test directory, left from Makefiles\n\t_testmain.go     old gotest file, left from Makefiles\n\ttest.out         old test log, left from Makefiles\n\tbuild.out        old test log, left from Makefiles\n\t*.[568ao]        object files, left from Makefiles\n\n\tDIR(.exe)        from go build\n\tDIR.test(.exe)   from go test -c\n\tMAINFILE(.exe)   from go build MAINFILE.go\n\t*.so             from SWIG\n\nIn the list, DIR represents the final path element of the\ndirectory, and MAINFILE is the base name of any Go source\nfile in the directory that is not included when building\nthe package.\n\nThe -i flag causes clean to remove the corresponding installed\narchive or binary (what 'go install' would create).\n\nThe -n flag causes clean to print the remove commands it would execute,\nbut not run them.\n\nThe -r flag causes clean to be applied recursively to all the\ndependencies of the packages named by the import paths.\n\nThe -x flag causes clean to print remove commands as it executes them.\n\nThe -cache flag causes clean to remove the entire go build cache.\n\nThe -testcache flag causes clean to expire all test results in the\ngo build cache.\n\nThe -modcache flag causes clean to remove the entire module\ndownload cache, including unpacked source code of versioned\ndependencies.\n\nFor more about build flags, see 'go help build'.\n\nFor more about specifying packages, see 'go help packages'.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "cache",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "i",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcache",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "r",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "testcache",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "doc",
            "LongName": "doc",
            "UsageLine": "go doc [doc flags] [package|[package.]symbol[.methodOrField]]",
            "Short": "show documentation for package or symbol",
            "Long": "\nDoc prints the documentation comments associated with the item identified by its\narguments (a package, const, func, type, var, method, or struct field)\nfollowed by a one-line summary of each of the first-level items \"under\"\nthat item (package-level declarations for a package, methods for a type,\netc.).\n\nDoc accepts zero, one, or two arguments.\n\nGiven no arguments, that is, when run as\n\n\tgo doc\n\nit prints the package documentation for the package in the current directory.\nIf the package is a command (package main), the exported symbols of the package\nare elided from the presentation unless the -cmd flag is provided.\n\nWhen run with one argument, the argument is treated as a Go-syntax-like\nrepresentation of the item to be documented. What the argument selects depends\non what is installed in GOROOT and GOPATH, as well as the form of the argument,\nwhich is schematically one of these:\n\n\tgo doc \u003cpkg\u003e\n\tgo doc \u003csym\u003e[.\u003cmethodOrField\u003e]\n\tgo doc [\u003cpkg\u003e.]\u003csym\u003e[.\u003cmethodOrField\u003e]\n\tgo doc [\u003cpkg\u003e.][\u003csym\u003e.]\u003cmethodOrField\u003e\n\nThe first item in this list matched by the argument is the one whose documentation\nis printed. (See the examples below.) However, if the argument starts with a capital\nletter it is assumed to identify a symbol or method in the current directory.\n\nFor packages, the order of scanning is determined lexically in breadth-first order.\nThat is, the package presented is the one that matches the search and is nearest\nthe root and lexically first at its level of the hierarchy. The GOROOT tree is\nalways scanned in its entirety before GOPATH.\n\nIf there is no package specified or matched, the package in the current\ndirectory is selected, so \"go doc Foo\" shows the documentation for symbol Foo in\nthe current package.\n\nThe package path must be either a qualified path or a proper suffix of a\npath. The go tool's usual package mechanism does not apply: package path\nelements like . and ... are not implemented by go doc.\n\nWhen run with two arguments, the first must be a full package path (not just a\nsuffix), and the second is a symbol, or symbol with method or struct field.\nThis is similar to the syntax accepted by godoc:\n\n\tgo doc \u003cpkg\u003e \u003csym\u003e[.\u003cmethodOrField\u003e]\n\nIn all forms, when matching symbols, lower-case letters in the argument match\neither case but upper-case letters match exactly. This means that there may be\nmultiple matches of a lower-case argument in a package if different symbols have\ndifferent cases. If this occurs, documentation for all matches is printed.\n\nExamples:\n\tgo doc\n\t\tShow documentation for current package.\n\tgo doc Foo\n\t\tShow documentation for Foo in the current package.\n\t\t(Foo starts with a capital letter so it cannot match\n\t\ta package path.)\n\tgo doc encoding/json\n\t\tShow documentation for the encoding/json package.\n\tgo doc json\n\t\tShorthand for encoding/json.\n\tgo doc json.Number (or go doc json.number)\n\t\tShow documentation and method summary for json.Number.\n\tgo doc json.Number.Int64 (or go doc json.number.int64)\n\t\tShow documentation for json.Number's Int64 method.\n\tgo doc cmd/doc\n\t\tShow package docs for the doc command.\n\tgo doc -cmd cmd/doc\n\t\tShow package docs and exported symbols within the doc command.\n\tgo doc template.new\n\t\tShow documentation for html/template's New function.\n\t\t(html/template is lexically before text/template)\n\tgo doc text/template.new # One argument\n\t\tShow documentation for text/template's New function.\n\tgo doc text/template new # Two arguments\n\t\tShow documentation for text/template's New function.\n\n\tAt least in the current tree, these invocations all print the\n\tdocumentation for json.Decoder's Decode method:\n\n\tgo doc json.Decoder.Decode\n\tgo doc json.decoder.decode\n\tgo doc json.decode\n\tcd go/src/encoding/json; go doc decode\n\nFlags:\n\t-all\n\t\tShow all the documentation for the package.\n\t-c\n\t\tRespect case when matching symbols.\n\t-cmd\n\t\tTreat a command (package main) like a regular package.\n\t\tOtherwise package main's exported symbols are hidden\n\t\twhen showing the package's top-level documentation.\n\t-short\n\t\tOne-line representation for each symbol.\n\t-src\n\t\tShow the full source code for the symbol. This will\n\t\tdisplay the full Go source of its declaration and\n\t\tdefinition, such as a function definition (including\n\t\tthe body), type declaration or enclosing const\n\t\tblock. The output may therefore include unexported\n\t\tdetails.\n\t-u\n\t\tShow documentation for unexported as well as exported\n\t\tsymbols, methods, and fields.\n",
            "Flags": null,
            "CustomFlags": true,
            "Commands": null
        },
        {
            "Name": "env",
            "LongName": "env",
            "UsageLine": "go env [-json] [-u] [-w] [var ...]",
            "Short": "print Go environment information",
            "Long": "\nEnv prints Go environment information.\n\nBy default env prints information as a shell script\n(on Windows, a batch file). If one or more variable\nnames is given as arguments, env prints the value of\neach named variable on its own line.\n\nThe -json flag prints the environment in JSON format\ninstead of as a shell script.\n\nThe -u flag requires one or more arguments and unsets\nthe default setting for the named environment variables,\nif one has been set with 'go env -w'.\n\nThe -w flag requires one or more arguments of the\nform NAME=VALUE and changes the default settings\nof the named environment variables to the given values.\n\nFor more about environment variables, see 'go help environment'.\n\t",
            "Flags": [
                {
                    "Name": "json",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "u",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "w",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "fix",
            "LongName": "fix",
            "UsageLine": "go fix [packages]",
            "Short": "update packages to use new APIs",
            "Long": "\nFix runs the Go fix command on the packages named by the import paths.\n\nFor more about fix, see 'go doc cmd/fix'.\nFor more about specifying packages, see 'go help packages'.\n\nTo run fix with specific options, run 'go tool fix'.\n\nSee also: go fmt, go vet.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "fmt",
            "LongName": "fmt",
            "UsageLine": "go fmt [-n] [-x] [packages]",
            "Short": "gofmt (reformat) package sources",
            "Long": "\nFmt runs the command 'gofmt -l -w' on the packages named\nby the import paths. It prints the names of the files that are modified.\n\nFor more about gofmt, see 'go doc cmd/gofmt'.\nFor more about specifying packages, see 'go help packages'.\n\nThe -n flag prints commands that would be executed.\nThe -x flag prints commands as they are executed.\n\nThe -mod flag's value sets which module download mode\nto use: readonly or vendor. See 'go help modules' for more.\n\nTo run gofmt with specific options, run gofmt itself.\n\nSee also: go fix, go vet.\n\t",
            "Flags": [
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "generate",
            "LongName": "generate",
            "UsageLine": "go generate [-run regexp] [-n] [-v] [-x] [build flags] [file.go... | packages]",
            "Short": "generate Go files by processing source",
            "Long": "\nGenerate runs commands described by directives within existing\nfiles. Those commands can run any process but the intent is to\ncreate or update Go source files.\n\nGo generate is never run automatically by go build, go get, go test,\nand so on. It must be run explicitly.\n\nGo generate scans the file for directives, which are lines of\nthe form,\n\n\t//go:generate command argument...\n\n(note: no leading spaces and no space in \"//go\") where command\nis the generator to be run, corresponding to an executable file\nthat can be run locally. It must either be in the shell path\n(gofmt), a fully qualified path (/usr/you/bin/mytool), or a\ncommand alias, described below.\n\nNote that go generate does not parse the file, so lines that look\nlike directives in comments or multiline strings will be treated\nas directives.\n\nThe arguments to the directive are space-separated tokens or\ndouble-quoted strings passed to the generator as individual\narguments when it is run.\n\nQuoted strings use Go syntax and are evaluated before execution; a\nquoted string appears as a single argument to the generator.\n\nTo convey to humans and machine tools that code is generated,\ngenerated source should have a line that matches the following\nregular expression (in Go syntax):\n\n\t^// Code generated .* DO NOT EDIT\\.$\n\nThis line must appear before the first non-comment, non-blank\ntext in the file.\n\nGo generate sets several variables when it runs the generator:\n\n\t$GOARCH\n\t\tThe execution architecture (arm, amd64, etc.)\n\t$GOOS\n\t\tThe execution operating system (linux, windows, etc.)\n\t$GOFILE\n\t\tThe base name of the file.\n\t$GOLINE\n\t\tThe line number of the directive in the source file.\n\t$GOPACKAGE\n\t\tThe name of the package of the file containing the directive.\n\t$DOLLAR\n\t\tA dollar sign.\n\nOther than variable substitution and quoted-string evaluation, no\nspecial processing such as \"globbing\" is performed on the command\nline.\n\nAs a last step before running the command, any invocations of any\nenvironment variables with alphanumeric names, such as $GOFILE or\n$HOME, are expanded throughout the command line. The syntax for\nvariable expansion is $NAME on all operating systems. Due to the\norder of evaluation, variables are expanded even inside quoted\nstrings. If the variable NAME is not set, $NAME expands to the\nempty string.\n\nA directive of the form,\n\n\t//go:generate -command xxx args...\n\nspecifies, for the remainder of this source file only, that the\nstring xxx represents the command identified by the arguments. This\ncan be used to create aliases or to handle multiword generators.\nFor example,\n\n\t//go:generate -command foo go tool foo\n\nspecifies that the command \"foo\" represents the generator\n\"go tool foo\".\n\nGenerate processes packages in the order given on the command line,\none at a time. If the command line lists .go files from a single directory,\nthey are treated as a single package. Within a package, generate processes the\nsource files in a package in file name order, one at a time. Within\na source file, generate runs generators in the order they appear\nin the file, one at a time. The go generate tool also sets the build\ntag \"generate\" so that files may be examined by go generate but ignored\nduring build.\n\nFor packages with invalid code, generate processes only source files with a\nvalid package clause.\n\nIf any generator returns an error exit status, \"go generate\" skips\nall further processing for that package.\n\nThe generator is run in the package's source directory.\n\nGo generate accepts one specific flag:\n\n\t-run=\"\"\n\t\tif non-empty, specifies a regular expression to select\n\t\tdirectives whose full original source text (excluding\n\t\tany trailing spaces and final newline) matches the\n\t\texpression.\n\nIt also accepts the standard build flags including -v, -n, and -x.\nThe -v flag prints the names of packages and files as they are\nprocessed.\nThe -n flag prints commands that would be executed.\nThe -x flag prints commands as they are executed.\n\nFor more about build flags, see 'go help build'.\n\nFor more about specifying packages, see 'go help packages'.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "run",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "get",
            "LongName": "get",
            "UsageLine": "go get [-d] [-t] [-u] [-v] [build flags] [packages]",
            "Short": "add dependencies to current module and install them",
            "Long": "\nGet resolves its command-line arguments to packages at specific module versions,\nupdates go.mod to require those versions, downloads source code into the\nmodule cache, then builds and installs the named packages.\n\nTo add a dependency for a package or upgrade it to its latest version:\n\n\tgo get example.com/pkg\n\nTo upgrade or downgrade a package to a specific version:\n\n\tgo get example.com/pkg@v1.2.3\n\nTo remove a dependency on a module and downgrade modules that require it:\n\n\tgo get example.com/mod@none\n\nSee https://golang.org/ref/mod#go-get for details.\n\nThe 'go install' command may be used to build and install packages. When a\nversion is specified, 'go install' runs in module-aware mode and ignores\nthe go.mod file in the current directory. For example:\n\n\tgo install example.com/pkg@v1.2.3\n\tgo install example.com/pkg@latest\n\nSee 'go help install' or https://golang.org/ref/mod#go-install for details.\n\nIn addition to build flags (listed in 'go help build') 'go get' accepts the\nfollowing flags.\n\nThe -t flag instructs get to consider modules needed to build tests of\npackages specified on the command line.\n\nThe -u flag instructs get to update modules providing dependencies\nof packages named on the command line to use newer minor or patch\nreleases when available.\n\nThe -u=patch flag (not -u patch) also instructs get to update dependencies,\nbut changes the default to select patch releases.\n\nWhen the -t and -u flags are used together, get will update\ntest dependencies as well.\n\nThe -d flag instructs get not to build or install packages. get will only\nupdate go.mod and download source code needed to build packages.\n\nBuilding and installing packages with get is deprecated. In a future release,\nthe -d flag will be enabled by default, and 'go get' will be only be used to\nadjust dependencies of the current module. To install a package using\ndependencies from the current module, use 'go install'. To install a package\nignoring the current module, use 'go install' with an @version suffix like\n\"@latest\" after each argument.\n\nFor more about modules, see https://golang.org/ref/mod.\n\nFor more about specifying packages, see 'go help packages'.\n\nThis text describes the behavior of get using modules to manage source\ncode and dependencies. If instead the go command is running in GOPATH\nmode, the details of get's flags and effects change, as does 'go help get'.\nSee 'go help gopath-get'.\n\nSee also: go build, go install, go clean, go mod.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "d",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "f",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "fix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "insecure",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "m",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "t",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "u",
                    "Usage": "",
                    "Value": {
                        "Type": "*modget.upgradeFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "install",
            "LongName": "install",
            "UsageLine": "go install [build flags] [packages]",
            "Short": "compile and install packages and dependencies",
            "Long": "\nInstall compiles and installs the packages named by the import paths.\n\nExecutables are installed in the directory named by the GOBIN environment\nvariable, which defaults to $GOPATH/bin or $HOME/go/bin if the GOPATH\nenvironment variable is not set. Executables in $GOROOT\nare installed in $GOROOT/bin or $GOTOOLDIR instead of $GOBIN.\n\nIf the arguments have version suffixes (like @latest or @v1.0.0), \"go install\"\nbuilds packages in module-aware mode, ignoring the go.mod file in the current\ndirectory or any parent directory, if there is one. This is useful for\ninstalling executables without affecting the dependencies of the main module.\nTo eliminate ambiguity about which module versions are used in the build, the\narguments must satisfy the following constraints:\n\n- Arguments must be package paths or package patterns (with \"...\" wildcards).\nThey must not be standard packages (like fmt), meta-patterns (std, cmd,\nall), or relative or absolute file paths.\n\n- All arguments must have the same version suffix. Different queries are not\nallowed, even if they refer to the same version.\n\n- All arguments must refer to packages in the same module at the same version.\n\n- No module is considered the \"main\" module. If the module containing\npackages named on the command line has a go.mod file, it must not contain\ndirectives (replace and exclude) that would cause it to be interpreted\ndifferently than if it were the main module. The module must not require\na higher version of itself.\n\n- Package path arguments must refer to main packages. Pattern arguments\nwill only match main packages.\n\nIf the arguments don't have version suffixes, \"go install\" may run in\nmodule-aware mode or GOPATH mode, depending on the GO111MODULE environment\nvariable and the presence of a go.mod file. See 'go help modules' for details.\nIf module-aware mode is enabled, \"go install\" runs in the context of the main\nmodule.\n\nWhen module-aware mode is disabled, other packages are installed in the\ndirectory $GOPATH/pkg/$GOOS_$GOARCH. When module-aware mode is enabled,\nother packages are built and cached but not installed.\n\nThe -i flag installs the dependencies of the named packages as well.\nThe -i flag is deprecated. Compiled packages are cached automatically.\n\nFor more about the build flags, see 'go help build'.\nFor more about specifying packages, see 'go help packages'.\n\nSee also: go build, go get, go clean.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "i",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "list",
            "LongName": "list",
            "UsageLine": "go list [-f format] [-json] [-m] [list flags] [build flags] [packages]",
            "Short": "list packages or modules",
            "Long": "\nList lists the named packages, one per line.\nThe most commonly-used flags are -f and -json, which control the form\nof the output printed for each package. Other list flags, documented below,\ncontrol more specific details.\n\nThe default output shows the package import path:\n\n    bytes\n    encoding/json\n    github.com/gorilla/mux\n    golang.org/x/net/html\n\nThe -f flag specifies an alternate format for the list, using the\nsyntax of package template. The default output is equivalent\nto -f '{{.ImportPath}}'. The struct being passed to the template is:\n\n    type Package struct {\n        Dir           string   // directory containing package sources\n        ImportPath    string   // import path of package in dir\n        ImportComment string   // path in import comment on package statement\n        Name          string   // package name\n        Doc           string   // package documentation string\n        Target        string   // install path\n        Shlib         string   // the shared library that contains this package (only set when -linkshared)\n        Goroot        bool     // is this package in the Go root?\n        Standard      bool     // is this package part of the standard Go library?\n        Stale         bool     // would 'go install' do anything for this package?\n        StaleReason   string   // explanation for Stale==true\n        Root          string   // Go root or Go path dir containing this package\n        ConflictDir   string   // this directory shadows Dir in $GOPATH\n        BinaryOnly    bool     // binary-only package (no longer supported)\n        ForTest       string   // package is only for use in named test\n        Export        string   // file containing export data (when using -export)\n        BuildID       string   // build ID of the compiled package (when using -export)\n        Module        *Module  // info about package's containing module, if any (can be nil)\n        Match         []string // command-line patterns matching this package\n        DepOnly       bool     // package is only a dependency, not explicitly listed\n\n        // Source files\n        GoFiles         []string   // .go source files (excluding CgoFiles, TestGoFiles, XTestGoFiles)\n        CgoFiles        []string   // .go source files that import \"C\"\n        CompiledGoFiles []string   // .go files presented to compiler (when using -compiled)\n        IgnoredGoFiles  []string   // .go source files ignored due to build constraints\n        IgnoredOtherFiles []string // non-.go source files ignored due to build constraints\n        CFiles          []string   // .c source files\n        CXXFiles        []string   // .cc, .cxx and .cpp source files\n        MFiles          []string   // .m source files\n        HFiles          []string   // .h, .hh, .hpp and .hxx source files\n        FFiles          []string   // .f, .F, .for and .f90 Fortran source files\n        SFiles          []string   // .s source files\n        SwigFiles       []string   // .swig files\n        SwigCXXFiles    []string   // .swigcxx files\n        SysoFiles       []string   // .syso object files to add to archive\n        TestGoFiles     []string   // _test.go files in package\n        XTestGoFiles    []string   // _test.go files outside package\n\n        // Embedded files\n        EmbedPatterns      []string // //go:embed patterns\n        EmbedFiles         []string // files matched by EmbedPatterns\n        TestEmbedPatterns  []string // //go:embed patterns in TestGoFiles\n        TestEmbedFiles     []string // files matched by TestEmbedPatterns\n        XTestEmbedPatterns []string // //go:embed patterns in XTestGoFiles\n        XTestEmbedFiles    []string // files matched by XTestEmbedPatterns\n\n        // Cgo directives\n        CgoCFLAGS    []string // cgo: flags for C compiler\n        CgoCPPFLAGS  []string // cgo: flags for C preprocessor\n        CgoCXXFLAGS  []string // cgo: flags for C++ compiler\n        CgoFFLAGS    []string // cgo: flags for Fortran compiler\n        CgoLDFLAGS   []string // cgo: flags for linker\n        CgoPkgConfig []string // cgo: pkg-config names\n\n        // Dependency information\n        Imports      []string          // import paths used by this package\n        ImportMap    map[string]string // map from source import to ImportPath (identity entries omitted)\n        Deps         []string          // all (recursively) imported dependencies\n        TestImports  []string          // imports from TestGoFiles\n        XTestImports []string          // imports from XTestGoFiles\n\n        // Error information\n        Incomplete bool            // this package or a dependency has an error\n        Error      *PackageError   // error loading package\n        DepsErrors []*PackageError // errors loading dependencies\n    }\n\nPackages stored in vendor directories report an ImportPath that includes the\npath to the vendor directory (for example, \"d/vendor/p\" instead of \"p\"),\nso that the ImportPath uniquely identifies a given copy of a package.\nThe Imports, Deps, TestImports, and XTestImports lists also contain these\nexpanded import paths. See golang.org/s/go15vendor for more about vendoring.\n\nThe error information, if any, is\n\n    type PackageError struct {\n        ImportStack   []string // shortest path from package named on command line to this one\n        Pos           string   // position of error (if present, file:line:col)\n        Err           string   // the error itself\n    }\n\nThe module information is a Module struct, defined in the discussion\nof list -m below.\n\nThe template function \"join\" calls strings.Join.\n\nThe template function \"context\" returns the build context, defined as:\n\n    type Context struct {\n        GOARCH        string   // target architecture\n        GOOS          string   // target operating system\n        GOROOT        string   // Go root\n        GOPATH        string   // Go path\n        CgoEnabled    bool     // whether cgo can be used\n        UseAllFiles   bool     // use files regardless of +build lines, file names\n        Compiler      string   // compiler to assume when computing target paths\n        BuildTags     []string // build constraints to match in +build lines\n        ToolTags      []string // toolchain-specific build constraints\n        ReleaseTags   []string // releases the current release is compatible with\n        InstallSuffix string   // suffix to use in the name of the install dir\n    }\n\nFor more information about the meaning of these fields see the documentation\nfor the go/build package's Context type.\n\nThe -json flag causes the package data to be printed in JSON format\ninstead of using the template format.\n\nThe -compiled flag causes list to set CompiledGoFiles to the Go source\nfiles presented to the compiler. Typically this means that it repeats\nthe files listed in GoFiles and then also adds the Go code generated\nby processing CgoFiles and SwigFiles. The Imports list contains the\nunion of all imports from both GoFiles and CompiledGoFiles.\n\nThe -deps flag causes list to iterate over not just the named packages\nbut also all their dependencies. It visits them in a depth-first post-order\ntraversal, so that a package is listed only after all its dependencies.\nPackages not explicitly listed on the command line will have the DepOnly\nfield set to true.\n\nThe -e flag changes the handling of erroneous packages, those that\ncannot be found or are malformed. By default, the list command\nprints an error to standard error for each erroneous package and\nomits the packages from consideration during the usual printing.\nWith the -e flag, the list command never prints errors to standard\nerror and instead processes the erroneous packages with the usual\nprinting. Erroneous packages will have a non-empty ImportPath and\na non-nil Error field; other information may or may not be missing\n(zeroed).\n\nThe -export flag causes list to set the Export field to the name of a\nfile containing up-to-date export information for the given package.\n\nThe -find flag causes list to identify the named packages but not\nresolve their dependencies: the Imports and Deps lists will be empty.\n\nThe -test flag causes list to report not only the named packages\nbut also their test binaries (for packages with tests), to convey to\nsource code analysis tools exactly how test binaries are constructed.\nThe reported import path for a test binary is the import path of\nthe package followed by a \".test\" suffix, as in \"math/rand.test\".\nWhen building a test, it is sometimes necessary to rebuild certain\ndependencies specially for that test (most commonly the tested\npackage itself). The reported import path of a package recompiled\nfor a particular test binary is followed by a space and the name of\nthe test binary in brackets, as in \"math/rand [math/rand.test]\"\nor \"regexp [sort.test]\". The ForTest field is also set to the name\nof the package being tested (\"math/rand\" or \"sort\" in the previous\nexamples).\n\nThe Dir, Target, Shlib, Root, ConflictDir, and Export file paths\nare all absolute paths.\n\nBy default, the lists GoFiles, CgoFiles, and so on hold names of files in Dir\n(that is, paths relative to Dir, not absolute paths).\nThe generated files added when using the -compiled and -test flags\nare absolute paths referring to cached copies of generated Go source files.\nAlthough they are Go source files, the paths may not end in \".go\".\n\nThe -m flag causes list to list modules instead of packages.\n\nWhen listing modules, the -f flag still specifies a format template\napplied to a Go struct, but now a Module struct:\n\n    type Module struct {\n        Path      string       // module path\n        Version   string       // module version\n        Versions  []string     // available module versions (with -versions)\n        Replace   *Module      // replaced by this module\n        Time      *time.Time   // time version was created\n        Update    *Module      // available update, if any (with -u)\n        Main      bool         // is this the main module?\n        Indirect  bool         // is this module only an indirect dependency of main module?\n        Dir       string       // directory holding files for this module, if any\n        GoMod     string       // path to go.mod file used when loading this module, if any\n        GoVersion string       // go version used in module\n        Retracted string       // retraction information, if any (with -retracted or -u)\n        Error     *ModuleError // error loading module\n    }\n\n    type ModuleError struct {\n        Err string // the error itself\n    }\n\nThe file GoMod refers to may be outside the module directory if the\nmodule is in the module cache or if the -modfile flag is used.\n\nThe default output is to print the module path and then\ninformation about the version and replacement if any.\nFor example, 'go list -m all' might print:\n\n    my/main/module\n    golang.org/x/text v0.3.0 =\u003e /tmp/text\n    rsc.io/pdf v0.1.1\n\nThe Module struct has a String method that formats this\nline of output, so that the default format is equivalent\nto -f '{{.String}}'.\n\nNote that when a module has been replaced, its Replace field\ndescribes the replacement module, and its Dir field is set to\nthe replacement's source code, if present. (That is, if Replace\nis non-nil, then Dir is set to Replace.Dir, with no access to\nthe replaced source code.)\n\nThe -u flag adds information about available upgrades.\nWhen the latest version of a given module is newer than\nthe current one, list -u sets the Module's Update field\nto information about the newer module. list -u will also set\nthe module's Retracted field if the current version is retracted.\nThe Module's String method indicates an available upgrade by\nformatting the newer version in brackets after the current version.\nIf a version is retracted, the string \"(retracted)\" will follow it.\nFor example, 'go list -m -u all' might print:\n\n    my/main/module\n    golang.org/x/text v0.3.0 [v0.4.0] =\u003e /tmp/text\n    rsc.io/pdf v0.1.1 (retracted) [v0.1.2]\n\n(For tools, 'go list -m -u -json all' may be more convenient to parse.)\n\nThe -versions flag causes list to set the Module's Versions field\nto a list of all known versions of that module, ordered according\nto semantic versioning, earliest to latest. The flag also changes\nthe default output format to display the module path followed by the\nspace-separated version list.\n\nThe -retracted flag causes list to report information about retracted\nmodule versions. When -retracted is used with -f or -json, the Retracted\nfield will be set to a string explaining why the version was retracted.\nThe string is taken from comments on the retract directive in the\nmodule's go.mod file. When -retracted is used with -versions, retracted\nversions are listed together with unretracted versions. The -retracted\nflag may be used with or without -m.\n\nThe arguments to list -m are interpreted as a list of modules, not packages.\nThe main module is the module containing the current directory.\nThe active modules are the main module and its dependencies.\nWith no arguments, list -m shows the main module.\nWith arguments, list -m shows the modules specified by the arguments.\nAny of the active modules can be specified by its module path.\nThe special pattern \"all\" specifies all the active modules, first the main\nmodule and then dependencies sorted by module path.\nA pattern containing \"...\" specifies the active modules whose\nmodule paths match the pattern.\nA query of the form path@version specifies the result of that query,\nwhich is not limited to active modules.\nSee 'go help modules' for more about module queries.\n\nThe template function \"module\" takes a single string argument\nthat must be a module path or query and returns the specified\nmodule as a Module struct. If an error occurs, the result will\nbe a Module struct with a non-nil Error field.\n\nFor more about build flags, see 'go help build'.\n\nFor more about specifying packages, see 'go help packages'.\n\nFor more about modules, see https://golang.org/ref/mod.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiled",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "deps",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "e",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "export",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "f",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "find",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "json",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "m",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "retracted",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "test",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "u",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "versions",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "mod",
            "LongName": "mod",
            "UsageLine": "go mod",
            "Short": "module maintenance",
            "Long": "Go mod provides access to operations on modules.\n\nNote that support for modules is built into all the go commands,\nnot just 'go mod'. For example, day-to-day adding, removing, upgrading,\nand downgrading of dependencies should be done using 'go get'.\nSee 'go help modules' for an overview of module functionality.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": [
                {
                    "Name": "download",
                    "LongName": "mod download",
                    "UsageLine": "go mod download [-x] [-json] [modules]",
                    "Short": "download modules to local cache",
                    "Long": "\nDownload downloads the named modules, which can be module patterns selecting\ndependencies of the main module or module queries of the form path@version.\nWith no arguments, download applies to all dependencies of the main module\n(equivalent to 'go mod download all').\n\nThe go command will automatically download modules as needed during ordinary\nexecution. The \"go mod download\" command is useful mainly for pre-filling\nthe local cache or to compute the answers for a Go module proxy.\n\nBy default, download writes nothing to standard output. It may print progress\nmessages and errors to standard error.\n\nThe -json flag causes download to print a sequence of JSON objects\nto standard output, describing each downloaded module (or failure),\ncorresponding to this Go struct:\n\n    type Module struct {\n        Path     string // module path\n        Version  string // module version\n        Error    string // error loading module\n        Info     string // absolute path to cached .info file\n        GoMod    string // absolute path to cached .mod file\n        Zip      string // absolute path to cached .zip file\n        Dir      string // absolute path to cached source root directory\n        Sum      string // checksum for path, version (as in go.sum)\n        GoModSum string // checksum for go.mod (as in go.sum)\n    }\n\nThe -x flag causes download to print the commands download executes.\n\nSee https://golang.org/ref/mod#go-mod-download for more about 'go mod download'.\n\nSee https://golang.org/ref/mod#version-queries for more about version queries.\n\t",
                    "Flags": [
                        {
                            "Name": "json",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "x",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "edit",
                    "LongName": "mod edit",
                    "UsageLine": "go mod edit [editing flags] [-fmt|-print|-json] [go.mod]",
                    "Short": "edit go.mod from tools or scripts",
                    "Long": "\nEdit provides a command-line interface for editing go.mod,\nfor use primarily by tools or scripts. It reads only go.mod;\nit does not look up information about the modules involved.\nBy default, edit reads and writes the go.mod file of the main module,\nbut a different target file can be specified after the editing flags.\n\nThe editing flags specify a sequence of editing operations.\n\nThe -fmt flag reformats the go.mod file without making other changes.\nThis reformatting is also implied by any other modifications that use or\nrewrite the go.mod file. The only time this flag is needed is if no other\nflags are specified, as in 'go mod edit -fmt'.\n\nThe -module flag changes the module's path (the go.mod file's module line).\n\nThe -require=path@version and -droprequire=path flags\nadd and drop a requirement on the given module path and version.\nNote that -require overrides any existing requirements on path.\nThese flags are mainly for tools that understand the module graph.\nUsers should prefer 'go get path@version' or 'go get path@none',\nwhich make other go.mod adjustments as needed to satisfy\nconstraints imposed by other modules.\n\nThe -exclude=path@version and -dropexclude=path@version flags\nadd and drop an exclusion for the given module path and version.\nNote that -exclude=path@version is a no-op if that exclusion already exists.\n\nThe -replace=old[@v]=new[@v] flag adds a replacement of the given\nmodule path and version pair. If the @v in old@v is omitted, a\nreplacement without a version on the left side is added, which applies\nto all versions of the old module path. If the @v in new@v is omitted,\nthe new path should be a local module root directory, not a module\npath. Note that -replace overrides any redundant replacements for old[@v],\nso omitting @v will drop existing replacements for specific versions.\n\nThe -dropreplace=old[@v] flag drops a replacement of the given\nmodule path and version pair. If the @v is omitted, a replacement without\na version on the left side is dropped.\n\nThe -retract=version and -dropretract=version flags add and drop a\nretraction on the given version. The version may be a single version\nlike \"v1.2.3\" or a closed interval like \"[v1.1.0,v1.1.9]\". Note that\n-retract=version is a no-op if that retraction already exists.\n\nThe -require, -droprequire, -exclude, -dropexclude, -replace,\n-dropreplace, -retract, and -dropretract editing flags may be repeated,\nand the changes are applied in the order given.\n\nThe -go=version flag sets the expected Go language version.\n\nThe -print flag prints the final go.mod in its text format instead of\nwriting it back to go.mod.\n\nThe -json flag prints the final go.mod file in JSON format instead of\nwriting it back to go.mod. The JSON output corresponds to these Go types:\n\n\ttype Module struct {\n\t\tPath    string\n\t\tVersion string\n\t}\n\n\ttype GoMod struct {\n\t\tModule  ModPath\n\t\tGo      string\n\t\tRequire []Require\n\t\tExclude []Module\n\t\tReplace []Replace\n\t\tRetract []Retract\n\t}\n\n\ttype ModPath struct {\n\t\tPath       string\n\t\tDeprecated string\n\t}\n\n\ttype Require struct {\n\t\tPath string\n\t\tVersion string\n\t\tIndirect bool\n\t}\n\n\ttype Replace struct {\n\t\tOld Module\n\t\tNew Module\n\t}\n\n\ttype Retract struct {\n\t\tLow       string\n\t\tHigh      string\n\t\tRationale string\n\t}\n\nRetract entries representing a single version (not an interval) will have\nthe \"Low\" and \"High\" fields set to the same value.\n\nNote that this only describes the go.mod file itself, not other modules\nreferred to indirectly. For the full set of modules available to a build,\nuse 'go list -m -json all'.\n\nSee https://golang.org/ref/mod#go-mod-edit for more about 'go mod edit'.\n\t",
                    "Flags": [
                        {
                            "Name": "dropexclude",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "dropreplace",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "droprequire",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "dropretract",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "exclude",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "fmt",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "go",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "json",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "module",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "n",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "print",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "replace",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "require",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "retract",
                            "Usage": "",
                            "Value": {
                                "Type": "modcmd.flagFunc",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "x",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "graph",
                    "LongName": "mod graph",
                    "UsageLine": "go mod graph [-go=version]",
                    "Short": "print module requirement graph",
                    "Long": "\nGraph prints the module requirement graph (with replacements applied)\nin text form. Each line in the output has two space-separated fields: a module\nand one of its requirements. Each module is identified as a string of the form\npath@version, except for the main module, which has no @version suffix.\n\nThe -go flag causes graph to report the module graph as loaded by the\ngiven Go version, instead of the version indicated by the 'go' directive\nin the go.mod file.\n\nSee https://golang.org/ref/mod#go-mod-graph for more about 'go mod graph'.\n\t",
                    "Flags": [
                        {
                            "Name": "go",
                            "Usage": "",
                            "Value": {
                                "Type": "*modcmd.goVersionFlag",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "init",
                    "LongName": "mod init",
                    "UsageLine": "go mod init [module-path]",
                    "Short": "initialize new module in current directory",
                    "Long": "\nInit initializes and writes a new go.mod file in the current directory, in\neffect creating a new module rooted at the current directory. The go.mod file\nmust not already exist.\n\nInit accepts one optional argument, the module path for the new module. If the\nmodule path argument is omitted, init will attempt to infer the module path\nusing import comments in .go files, vendoring tool configuration files (like\nGopkg.lock), and the current directory (if in GOPATH).\n\nIf a configuration file for a vendoring tool is present, init will attempt to\nimport module requirements from it.\n\nSee https://golang.org/ref/mod#go-mod-init for more about 'go mod init'.\n",
                    "Flags": [
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "tidy",
                    "LongName": "mod tidy",
                    "UsageLine": "go mod tidy [-e] [-v] [-go=version] [-compat=version]",
                    "Short": "add missing and remove unused modules",
                    "Long": "\nTidy makes sure go.mod matches the source code in the module.\nIt adds any missing modules necessary to build the current module's\npackages and dependencies, and it removes unused modules that\ndon't provide any relevant packages. It also adds any missing entries\nto go.sum and removes any unnecessary ones.\n\nThe -v flag causes tidy to print information about removed modules\nto standard error.\n\nThe -e flag causes tidy to attempt to proceed despite errors\nencountered while loading packages.\n\nThe -go flag causes tidy to update the 'go' directive in the go.mod\nfile to the given version, which may change which module dependencies\nare retained as explicit requirements in the go.mod file.\n(Go versions 1.17 and higher retain more requirements in order to\nsupport lazy module loading.)\n\nThe -compat flag preserves any additional checksums needed for the\n'go' command from the indicated major Go release to successfully load\nthe module graph, and causes tidy to error out if that version of the\n'go' command would load any imported package from a different module\nversion. By default, tidy acts as if the -compat flag were set to the\nversion prior to the one indicated by the 'go' directive in the go.mod\nfile.\n\nSee https://golang.org/ref/mod#go-mod-tidy for more about 'go mod tidy'.\n\t",
                    "Flags": [
                        {
                            "Name": "compat",
                            "Usage": "",
                            "Value": {
                                "Type": "*modcmd.goVersionFlag",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "e",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "go",
                            "Usage": "",
                            "Value": {
                                "Type": "*modcmd.goVersionFlag",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "v",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "vendor",
                    "LongName": "mod vendor",
                    "UsageLine": "go mod vendor [-e] [-v]",
                    "Short": "make vendored copy of dependencies",
                    "Long": "\nVendor resets the main module's vendor directory to include all packages\nneeded to build and test all the main module's packages.\nIt does not include test code for vendored packages.\n\nThe -v flag causes vendor to print the names of vendored\nmodules and packages to standard error.\n\nThe -e flag causes vendor to attempt to proceed despite errors\nencountered while loading packages.\n\nSee https://golang.org/ref/mod#go-mod-vendor for more about 'go mod vendor'.\n\t",
                    "Flags": [
                        {
                            "Name": "e",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "v",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "verify",
                    "LongName": "mod verify",
                    "UsageLine": "go mod verify",
                    "Short": "verify dependencies have expected content",
                    "Long": "\nVerify checks that the dependencies of the current module,\nwhich are stored in a local downloaded source cache, have not been\nmodified since being downloaded. If all the modules are unmodified,\nverify prints \"all modules verified.\" Otherwise it reports which\nmodules have been changed and causes 'go mod' to exit with a\nnon-zero status.\n\nSee https://golang.org/ref/mod#go-mod-verify for more about 'go mod verify'.\n\t",
                    "Flags": [
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                },
                {
                    "Name": "why",
                    "LongName": "mod why",
                    "UsageLine": "go mod why [-m] [-vendor] packages...",
                    "Short": "explain why packages or modules are needed",
                    "Long": "\nWhy shows a shortest path in the import graph from the main module to\neach of the listed packages. If the -m flag is given, why treats the\narguments as a list of modules and finds a path to any package in each\nof the modules.\n\nBy default, why queries the graph of packages matched by \"go list all\",\nwhich includes tests for reachable packages. The -vendor flag causes why\nto exclude tests of dependencies.\n\nThe output is a sequence of stanzas, one for each package or module\nname on the command line, separated by blank lines. Each stanza begins\nwith a comment line \"# package\" or \"# module\" giving the target\npackage or module. Subsequent lines give a path through the import\ngraph, one package per line. If the package or module is not\nreferenced from the main module, the stanza will display a single\nparenthesized note indicating that fact.\n\nFor example:\n\n\t$ go mod why golang.org/x/text/language golang.org/x/text/encoding\n\t# golang.org/x/text/language\n\trsc.io/quote\n\trsc.io/sampler\n\tgolang.org/x/text/language\n\n\t# golang.org/x/text/encoding\n\t(main module does not need package golang.org/x/text/encoding)\n\t$\n\nSee https://golang.org/ref/mod#go-mod-why for more about 'go mod why'.\n\t",
                    "Flags": [
                        {
                            "Name": "m",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modcacherw",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        },
                        {
                            "Name": "modfile",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "overlay",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.stringValue",
                                "String": ""
                            },
                            "DefValue": ""
                        },
                        {
                            "Name": "vendor",
                            "Usage": "",
                            "Value": {
                                "Type": "*flag.boolValue",
                                "String": "false"
                            },
                            "DefValue": "false"
                        }
                    ],
                    "CustomFlags": false,
                    "Commands": null
                }
            ]
        },
        {
            "Name": "run",
            "LongName": "run",
            "UsageLine": "go run [build flags] [-exec xprog] package [arguments...]",
            "Short": "compile and run Go program",
            "Long": "\nRun compiles and runs the named main Go package.\nTypically the package is specified as a list of .go source files from a single\ndirectory, but it may also be an import path, file system path, or pattern\nmatching a single known package, as in 'go run .' or 'go run my/cmd'.\n\nIf the package argument has a version suffix (like @latest or @v1.0.0),\n\"go run\" builds the program in module-aware mode, ignoring the go.mod file in\nthe current directory or any parent directory, if there is one. This is useful\nfor running programs without affecting the dependencies of the main module.\n\nIf the package argument doesn't have a version suffix, \"go run\" may run in\nmodule-aware mode or GOPATH mode, depending on the GO111MODULE environment\nvariable and the presence of a go.mod file. See 'go help modules' for details.\nIf module-aware mode is enabled, \"go run\" runs in the context of the main\nmodule.\n\nBy default, 'go run' runs the compiled binary directly: 'a.out arguments...'.\nIf the -exec flag is given, 'go run' invokes the binary using xprog:\n\t'xprog a.out arguments...'.\nIf the -exec flag is not given, GOOS or GOARCH is different from the system\ndefault, and a program named go_$GOOS_$GOARCH_exec can be found\non the current search path, 'go run' invokes the binary using that program,\nfor example 'go_js_wasm_exec a.out arguments...'. This allows execution of\ncross-compiled programs when a simulator or other execution method is\navailable.\n\nThe exit status of Run is not the exit status of the compiled binary.\n\nFor more about build flags, see 'go help build'.\nFor more about specifying packages, see 'go help packages'.\n\nSee also: go build.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "exec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "test",
            "LongName": "test",
            "UsageLine": "go test [build/test flags] [packages] [build/test flags \u0026 test binary flags]",
            "Short": "test packages",
            "Long": "\n'Go test' automates testing the packages named by the import paths.\nIt prints a summary of the test results in the format:\n\n\tok   archive/tar   0.011s\n\tFAIL archive/zip   0.022s\n\tok   compress/gzip 0.033s\n\t...\n\nfollowed by detailed output for each failed package.\n\n'Go test' recompiles each package along with any files with names matching\nthe file pattern \"*_test.go\".\nThese additional files can contain test functions, benchmark functions, and\nexample functions. See 'go help testfunc' for more.\nEach listed package causes the execution of a separate test binary.\nFiles whose names begin with \"_\" (including \"_test.go\") or \".\" are ignored.\n\nTest files that declare a package with the suffix \"_test\" will be compiled as a\nseparate package, and then linked and run with the main test binary.\n\nThe go tool will ignore a directory named \"testdata\", making it available\nto hold ancillary data needed by the tests.\n\nAs part of building a test binary, go test runs go vet on the package\nand its test source files to identify significant problems. If go vet\nfinds any problems, go test reports those and does not run the test\nbinary. Only a high-confidence subset of the default go vet checks are\nused. That subset is: 'atomic', 'bool', 'buildtags', 'errorsas',\n'ifaceassert', 'nilfunc', 'printf', and 'stringintconv'. You can see\nthe documentation for these and other vet tests via \"go doc cmd/vet\".\nTo disable the running of go vet, use the -vet=off flag.\n\nAll test output and summary lines are printed to the go command's\nstandard output, even if the test printed them to its own standard\nerror. (The go command's standard error is reserved for printing\nerrors building the tests.)\n\nGo test runs in two different modes:\n\nThe first, called local directory mode, occurs when go test is\ninvoked with no package arguments (for example, 'go test' or 'go\ntest -v'). In this mode, go test compiles the package sources and\ntests found in the current directory and then runs the resulting\ntest binary. In this mode, caching (discussed below) is disabled.\nAfter the package test finishes, go test prints a summary line\nshowing the test status ('ok' or 'FAIL'), package name, and elapsed\ntime.\n\nThe second, called package list mode, occurs when go test is invoked\nwith explicit package arguments (for example 'go test math', 'go\ntest ./...', and even 'go test .'). In this mode, go test compiles\nand tests each of the packages listed on the command line. If a\npackage test passes, go test prints only the final 'ok' summary\nline. If a package test fails, go test prints the full test output.\nIf invoked with the -bench or -v flag, go test prints the full\noutput even for passing package tests, in order to display the\nrequested benchmark results or verbose logging. After the package\ntests for all of the listed packages finish, and their output is\nprinted, go test prints a final 'FAIL' status if any package test\nhas failed.\n\nIn package list mode only, go test caches successful package test\nresults to avoid unnecessary repeated running of tests. When the\nresult of a test can be recovered from the cache, go test will\nredisplay the previous output instead of running the test binary\nagain. When this happens, go test prints '(cached)' in place of the\nelapsed time in the summary line.\n\nThe rule for a match in the cache is that the run involves the same\ntest binary and the flags on the command line come entirely from a\nrestricted set of 'cacheable' test flags, defined as -benchtime, -cpu,\n-list, -parallel, -run, -short, and -v. If a run of go test has any test\nor non-test flags outside this set, the result is not cached. To\ndisable test caching, use any test flag or argument other than the\ncacheable flags. The idiomatic way to disable test caching explicitly\nis to use -count=1. Tests that open files within the package's source\nroot (usually $GOPATH) or that consult environment variables only\nmatch future runs in which the files and environment variables are unchanged.\nA cached test result is treated as executing in no time at all,\nso a successful package test result will be cached and reused\nregardless of -timeout setting.\n\nIn addition to the build flags, the flags handled by 'go test' itself are:\n\n\t-args\n\t    Pass the remainder of the command line (everything after -args)\n\t    to the test binary, uninterpreted and unchanged.\n\t    Because this flag consumes the remainder of the command line,\n\t    the package list (if present) must appear before this flag.\n\n\t-c\n\t    Compile the test binary to pkg.test but do not run it\n\t    (where pkg is the last element of the package's import path).\n\t    The file name can be changed with the -o flag.\n\n\t-exec xprog\n\t    Run the test binary using xprog. The behavior is the same as\n\t    in 'go run'. See 'go help run' for details.\n\n\t-i\n\t    Install packages that are dependencies of the test.\n\t    Do not run the test.\n\t    The -i flag is deprecated. Compiled packages are cached automatically.\n\n\t-json\n\t    Convert test output to JSON suitable for automated processing.\n\t    See 'go doc test2json' for the encoding details.\n\n\t-o file\n\t    Compile the test binary to the named file.\n\t    The test still runs (unless -c or -i is specified).\n\nThe test binary also accepts flags that control execution of the test; these\nflags are also accessible by 'go test'. See 'go help testflag' for details.\n\nFor more about build flags, see 'go help build'.\nFor more about specifying packages, see 'go help packages'.\n\nSee also: go build, go vet.\n",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "bench",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "benchmem",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "benchtime",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "blockprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "blockprofilerate",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "c",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "count",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "0"
                    },
                    "DefValue": "0"
                },
                {
                    "Name": "cover",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "covermode",
                    "Usage": "",
                    "Value": {
                        "Type": "test.coverFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "coverpkg",
                    "Usage": "",
                    "Value": {
                        "Type": "test.coverFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "coverprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "test.coverFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "cpu",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "cpuprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "exec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "failfast",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "i",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "json",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "list",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "memprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "memprofilerate",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mutexprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "mutexprofilefraction",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "o",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "outputdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*test.outputdirFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "parallel",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "0"
                    },
                    "DefValue": "0"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "run",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "short",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "shuffle",
                    "Usage": "",
                    "Value": {
                        "Type": "*test.shuffleFlag",
                        "String": "off"
                    },
                    "DefValue": "off"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "test.bench",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.benchmem",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "test.benchtime",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.blockprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.blockprofilerate",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.count",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "0"
                    },
                    "DefValue": "0"
                },
                {
                    "Name": "test.coverprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "test.coverFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.cpu",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.cpuprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.failfast",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "test.list",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.memprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.memprofilerate",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.mutexprofile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.mutexprofilefraction",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.outputdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*test.outputdirFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.parallel",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "0"
                    },
                    "DefValue": "0"
                },
                {
                    "Name": "test.run",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.short",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "test.shuffle",
                    "Usage": "",
                    "Value": {
                        "Type": "*test.shuffleFlag",
                        "String": "off"
                    },
                    "DefValue": "off"
                },
                {
                    "Name": "test.timeout",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.durationValue",
                        "String": "10m0s"
                    },
                    "DefValue": "10m0s"
                },
                {
                    "Name": "test.trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "test.v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "timeout",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.durationValue",
                        "String": "10m0s"
                    },
                    "DefValue": "10m0s"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "vet",
                    "Usage": "",
                    "Value": {
                        "Type": "*test.vetFlag",
                        "String": "-atomic,-bool,-buildtags,-errorsas,-ifaceassert,-nilfunc,-printf,-stringintconv"
                    },
                    "DefValue": "-atomic,-bool,-buildtags,-errorsas,-ifaceassert,-nilfunc,-printf,-stringintconv"
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": true,
            "Commands": null
        },
        {
            "Name": "tool",
            "LongName": "tool",
            "UsageLine": "go tool [-n] command [args...]",
            "Short": "run specified go tool",
            "Long": "\nTool runs the go tool command identified by the arguments.\nWith no arguments it prints the list of known tools.\n\nThe -n flag causes tool to print the command that would be\nexecuted but not execute it.\n\nFor more about each tool command, see 'go doc cmd/\u003ccommand\u003e'.\n",
            "Flags": [
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "version",
            "LongName": "version",
            "UsageLine": "go version [-m] [-v] [file ...]",
            "Short": "print Go version",
            "Long": "Version prints the build information for Go executables.\n\nGo version reports the Go version used to build each of the named\nexecutable files.\n\nIf no files are named on the command line, go version prints its own\nversion information.\n\nIf a directory is named, go version walks that directory, recursively,\nlooking for recognized Go binaries and reporting their versions.\nBy default, go version does not report unrecognized files found\nduring a directory scan. The -v flag causes it to report unrecognized files.\n\nThe -m flag causes go version to print each executable's embedded\nmodule version information, when available. In the output, the module\ninformation consists of multiple lines following the version line, each\nindented by a leading tab character.\n\nSee also: go doc runtime/debug.BuildInfo.\n",
            "Flags": [
                {
                    "Name": "m",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "vet",
            "LongName": "vet",
            "UsageLine": "go vet [-n] [-x] [-vettool prog] [build flags] [vet flags] [packages]",
            "Short": "report likely mistakes in packages",
            "Long": "\nVet runs the Go vet command on the packages named by the import paths.\n\nFor more about vet and its flags, see 'go doc cmd/vet'.\nFor more about specifying packages, see 'go help packages'.\nFor a list of checkers and their flags, see 'go tool vet help'.\nFor details of a specific checker such as 'printf', see 'go tool vet help printf'.\n\nThe -n flag prints commands that would be executed.\nThe -x flag prints commands as they are executed.\n\nThe -vettool=prog flag selects a different analysis tool with alternative\nor additional checks.\nFor example, the 'shadow' analyzer can be built and run using these commands:\n\n  go install golang.org/x/tools/go/analysis/passes/shadow/cmd/shadow\n  go vet -vettool=$(which shadow)\n\nThe build flags supported by go vet are those that control package resolution\nand execution, such as -n, -x, -v, -tags, and -toolexec.\nFor more about these flags, see 'go help build'.\n\nSee also: go fmt, go fix.\n\t",
            "Flags": [
                {
                    "Name": "a",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "asmflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "buildmode",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": "default"
                    },
                    "DefValue": "default"
                },
                {
                    "Name": "compiler",
                    "Usage": "",
                    "Value": {
                        "Type": "work.buildCompiler",
                        "String": "gc"
                    },
                    "DefValue": "gc"
                },
                {
                    "Name": "debug-actiongraph",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "debug-trace",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "gccgoflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "gcflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "installsuffix",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "ldflags",
                    "Usage": "",
                    "Value": {
                        "Type": "*load.PerPackageFlag",
                        "String": "\u003cPerPackageFlag\u003e"
                    },
                    "DefValue": "\u003cPerPackageFlag\u003e"
                },
                {
                    "Name": "linkshared",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "mod",
                    "Usage": "",
                    "Value": {
                        "Type": "base.explicitStringFlag",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "modcacherw",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "modfile",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "msan",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "n",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "overlay",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "p",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.intValue",
                        "String": "10"
                    },
                    "DefValue": "10"
                },
                {
                    "Name": "pkgdir",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "race",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "tags",
                    "Usage": "",
                    "Value": {
                        "Type": "*work.tagsFlag",
                        "String": "\u003cTagsFlag\u003e"
                    },
                    "DefValue": "\u003cTagsFlag\u003e"
                },
                {
                    "Name": "toolexec",
                    "Usage": "",
                    "Value": {
                        "Type": "*base.StringsFlag",
                        "String": "\u003cStringsFlag\u003e"
                    },
                    "DefValue": "\u003cStringsFlag\u003e"
                },
                {
                    "Name": "trimpath",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "v",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "vettool",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.stringValue",
                        "String": ""
                    },
                    "DefValue": ""
                },
                {
                    "Name": "work",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                },
                {
                    "Name": "x",
                    "Usage": "",
                    "Value": {
                        "Type": "*flag.boolValue",
                        "String": "false"
                    },
                    "DefValue": "false"
                }
            ],
            "CustomFlags": true,
            "Commands": null
        },
        {
            "Name": "buildconstraint",
            "LongName": "buildconstraint",
            "UsageLine": "buildconstraint",
            "Short": "build constraints",
            "Long": "\nA build constraint, also known as a build tag, is a line comment that begins\n\n\t//go:build\n\nthat lists the conditions under which a file should be included in the package.\nConstraints may appear in any kind of source file (not just Go), but\nthey must appear near the top of the file, preceded\nonly by blank lines and other line comments. These rules mean that in Go\nfiles a build constraint must appear before the package clause.\n\nTo distinguish build constraints from package documentation,\na build constraint should be followed by a blank line.\n\nA build constraint is evaluated as an expression containing options\ncombined by ||, \u0026\u0026, and ! operators and parentheses. Operators have\nthe same meaning as in Go.\n\nFor example, the following build constraint constrains a file to\nbuild when the \"linux\" and \"386\" constraints are satisfied, or when\n\"darwin\" is satisfied and \"cgo\" is not:\n\n\t//go:build (linux \u0026\u0026 386) || (darwin \u0026\u0026 !cgo)\n\nIt is an error for a file to have more than one //go:build line.\n\nDuring a particular build, the following words are satisfied:\n\n\t- the target operating system, as spelled by runtime.GOOS, set with the\n\t  GOOS environment variable.\n\t- the target architecture, as spelled by runtime.GOARCH, set with the\n\t  GOARCH environment variable.\n\t- the compiler being used, either \"gc\" or \"gccgo\"\n\t- \"cgo\", if the cgo command is supported (see CGO_ENABLED in\n\t  'go help environment').\n\t- a term for each Go major release, through the current version:\n\t  \"go1.1\" from Go version 1.1 onward, \"go1.12\" from Go 1.12, and so on.\n\t- any additional tags given by the -tags flag (see 'go help build').\n\nThere are no separate build tags for beta or minor releases.\n\nIf a file's name, after stripping the extension and a possible _test suffix,\nmatches any of the following patterns:\n\t*_GOOS\n\t*_GOARCH\n\t*_GOOS_GOARCH\n(example: source_windows_amd64.go) where GOOS and GOARCH represent\nany known operating system and architecture values respectively, then\nthe file is considered to have an implicit build constraint requiring\nthose terms (in addition to any explicit constraints in the file).\n\nUsing GOOS=android matches build tags and files as for GOOS=linux\nin addition to android tags and files.\n\nUsing GOOS=illumos matches build tags and files as for GOOS=solaris\nin addition to illumos tags and files.\n\nUsing GOOS=ios matches build tags and files as for GOOS=darwin\nin addition to ios tags and files.\n\nTo keep a file from being considered for the build:\n\n\t//go:build ignore\n\n(any other unsatisfied word will work as well, but \"ignore\" is conventional.)\n\nTo build a file only when using cgo, and only on Linux and OS X:\n\n\t//go:build cgo \u0026\u0026 (linux || darwin)\n\nSuch a file is usually paired with another file implementing the\ndefault functionality for other systems, which in this case would\ncarry the constraint:\n\n\t//go:build !(cgo \u0026\u0026 (linux || darwin))\n\nNaming a file dns_windows.go will cause it to be included only when\nbuilding the package for Windows; similarly, math_386.s will be included\nonly when building the package for 32-bit x86.\n\nGo versions 1.16 and earlier used a different syntax for build constraints,\nwith a \"// +build\" prefix. The gofmt command will add an equivalent //go:build\nconstraint when encountering the older syntax.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "buildmode",
            "LongName": "buildmode",
            "UsageLine": "buildmode",
            "Short": "build modes",
            "Long": "\nThe 'go build' and 'go install' commands take a -buildmode argument which\nindicates which kind of object file is to be built. Currently supported values\nare:\n\n\t-buildmode=archive\n\t\tBuild the listed non-main packages into .a files. Packages named\n\t\tmain are ignored.\n\n\t-buildmode=c-archive\n\t\tBuild the listed main package, plus all packages it imports,\n\t\tinto a C archive file. The only callable symbols will be those\n\t\tfunctions exported using a cgo //export comment. Requires\n\t\texactly one main package to be listed.\n\n\t-buildmode=c-shared\n\t\tBuild the listed main package, plus all packages it imports,\n\t\tinto a C shared library. The only callable symbols will\n\t\tbe those functions exported using a cgo //export comment.\n\t\tRequires exactly one main package to be listed.\n\n\t-buildmode=default\n\t\tListed main packages are built into executables and listed\n\t\tnon-main packages are built into .a files (the default\n\t\tbehavior).\n\n\t-buildmode=shared\n\t\tCombine all the listed non-main packages into a single shared\n\t\tlibrary that will be used when building with the -linkshared\n\t\toption. Packages named main are ignored.\n\n\t-buildmode=exe\n\t\tBuild the listed main packages and everything they import into\n\t\texecutables. Packages not named main are ignored.\n\n\t-buildmode=pie\n\t\tBuild the listed main packages and everything they import into\n\t\tposition independent executables (PIE). Packages not named\n\t\tmain are ignored.\n\n\t-buildmode=plugin\n\t\tBuild the listed main packages, plus all packages that they\n\t\timport, into a Go plugin. Packages not named main are ignored.\n\nOn AIX, when linking a C program that uses a Go archive built with\n-buildmode=c-archive, you must pass -Wl,-bnoobjreorder to the C compiler.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "c",
            "LongName": "c",
            "UsageLine": "c",
            "Short": "calling between Go and C",
            "Long": "\nThere are two different ways to call between Go and C/C++ code.\n\nThe first is the cgo tool, which is part of the Go distribution. For\ninformation on how to use it see the cgo documentation (go doc cmd/cgo).\n\nThe second is the SWIG program, which is a general tool for\ninterfacing between languages. For information on SWIG see\nhttp://swig.org/. When running go build, any file with a .swig\nextension will be passed to SWIG. Any file with a .swigcxx extension\nwill be passed to SWIG with the -c++ option.\n\nWhen either cgo or SWIG is used, go build will pass any .c, .m, .s, .S\nor .sx files to the C compiler, and any .cc, .cpp, .cxx files to the C++\ncompiler. The CC or CXX environment variables may be set to determine\nthe C or C++ compiler, respectively, to use.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "cache",
            "LongName": "cache",
            "UsageLine": "cache",
            "Short": "build and test caching",
            "Long": "\nThe go command caches build outputs for reuse in future builds.\nThe default location for cache data is a subdirectory named go-build\nin the standard user cache directory for the current operating system.\nSetting the GOCACHE environment variable overrides this default,\nand running 'go env GOCACHE' prints the current cache directory.\n\nThe go command periodically deletes cached data that has not been\nused recently. Running 'go clean -cache' deletes all cached data.\n\nThe build cache correctly accounts for changes to Go source files,\ncompilers, compiler options, and so on: cleaning the cache explicitly\nshould not be necessary in typical use. However, the build cache\ndoes not detect changes to C libraries imported with cgo.\nIf you have made changes to the C libraries on your system, you\nwill need to clean the cache explicitly or else use the -a build flag\n(see 'go help build') to force rebuilding of packages that\ndepend on the updated C libraries.\n\nThe go command also caches successful package test results.\nSee 'go help test' for details. Running 'go clean -testcache' removes\nall cached test results (but not cached build results).\n\nThe GODEBUG environment variable can enable printing of debugging\ninformation about the state of the cache:\n\nGODEBUG=gocacheverify=1 causes the go command to bypass the\nuse of any cache entries and instead rebuild everything and check\nthat the results match existing cache entries.\n\nGODEBUG=gocachehash=1 causes the go command to print the inputs\nfor all of the content hashes it uses to construct cache lookup keys.\nThe output is voluminous but can be useful for debugging the cache.\n\nGODEBUG=gocachetest=1 causes the go command to print details of its\ndecisions about whether to reuse a cached test result.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "environment",
            "LongName": "environment",
            "UsageLine": "environment",
            "Short": "environment variables",
            "Long": "\n\nThe go command and the tools it invokes consult environment variables\nfor configuration. If an environment variable is unset, the go command\nuses a sensible default setting. To see the effective setting of the\nvariable \u003cNAME\u003e, run 'go env \u003cNAME\u003e'. To change the default setting,\nrun 'go env -w \u003cNAME\u003e=\u003cVALUE\u003e'. Defaults changed using 'go env -w'\nare recorded in a Go environment configuration file stored in the\nper-user configuration directory, as reported by os.UserConfigDir.\nThe location of the configuration file can be changed by setting\nthe environment variable GOENV, and 'go env GOENV' prints the\neffective location, but 'go env -w' cannot change the default location.\nSee 'go help env' for details.\n\nGeneral-purpose environment variables:\n\n\tGO111MODULE\n\t\tControls whether the go command runs in module-aware mode or GOPATH mode.\n\t\tMay be \"off\", \"on\", or \"auto\".\n\t\tSee https://golang.org/ref/mod#mod-commands.\n\tGCCGO\n\t\tThe gccgo command to run for 'go build -compiler=gccgo'.\n\tGOARCH\n\t\tThe architecture, or processor, for which to compile code.\n\t\tExamples are amd64, 386, arm, ppc64.\n\tGOBIN\n\t\tThe directory where 'go install' will install a command.\n\tGOCACHE\n\t\tThe directory where the go command will store cached\n\t\tinformation for reuse in future builds.\n\tGOMODCACHE\n\t\tThe directory where the go command will store downloaded modules.\n\tGODEBUG\n\t\tEnable various debugging facilities. See 'go doc runtime'\n\t\tfor details.\n\tGOENV\n\t\tThe location of the Go environment configuration file.\n\t\tCannot be set using 'go env -w'.\n\tGOFLAGS\n\t\tA space-separated list of -flag=value settings to apply\n\t\tto go commands by default, when the given flag is known by\n\t\tthe current command. Each entry must be a standalone flag.\n\t\tBecause the entries are space-separated, flag values must\n\t\tnot contain spaces. Flags listed on the command line\n\t\tare applied after this list and therefore override it.\n\tGOINSECURE\n\t\tComma-separated list of glob patterns (in the syntax of Go's path.Match)\n\t\tof module path prefixes that should always be fetched in an insecure\n\t\tmanner. Only applies to dependencies that are being fetched directly.\n\t\tGOINSECURE does not disable checksum database validation. GOPRIVATE or\n\t\tGONOSUMDB may be used to achieve that.\n\tGOOS\n\t\tThe operating system for which to compile code.\n\t\tExamples are linux, darwin, windows, netbsd.\n\tGOPATH\n\t\tFor more details see: 'go help gopath'.\n\tGOPROXY\n\t\tURL of Go module proxy. See https://golang.org/ref/mod#environment-variables\n\t\tand https://golang.org/ref/mod#module-proxy for details.\n\tGOPRIVATE, GONOPROXY, GONOSUMDB\n\t\tComma-separated list of glob patterns (in the syntax of Go's path.Match)\n\t\tof module path prefixes that should always be fetched directly\n\t\tor that should not be compared against the checksum database.\n\t\tSee https://golang.org/ref/mod#private-modules.\n\tGOROOT\n\t\tThe root of the go tree.\n\tGOSUMDB\n\t\tThe name of checksum database to use and optionally its public key and\n\t\tURL. See https://golang.org/ref/mod#authenticating.\n\tGOTMPDIR\n\t\tThe directory where the go command will write\n\t\ttemporary source files, packages, and binaries.\n\tGOVCS\n\t\tLists version control commands that may be used with matching servers.\n\t\tSee 'go help vcs'.\n\nEnvironment variables for use with cgo:\n\n\tAR\n\t\tThe command to use to manipulate library archives when\n\t\tbuilding with the gccgo compiler.\n\t\tThe default is 'ar'.\n\tCC\n\t\tThe command to use to compile C code.\n\tCGO_ENABLED\n\t\tWhether the cgo command is supported. Either 0 or 1.\n\tCGO_CFLAGS\n\t\tFlags that cgo will pass to the compiler when compiling\n\t\tC code.\n\tCGO_CFLAGS_ALLOW\n\t\tA regular expression specifying additional flags to allow\n\t\tto appear in #cgo CFLAGS source code directives.\n\t\tDoes not apply to the CGO_CFLAGS environment variable.\n\tCGO_CFLAGS_DISALLOW\n\t\tA regular expression specifying flags that must be disallowed\n\t\tfrom appearing in #cgo CFLAGS source code directives.\n\t\tDoes not apply to the CGO_CFLAGS environment variable.\n\tCGO_CPPFLAGS, CGO_CPPFLAGS_ALLOW, CGO_CPPFLAGS_DISALLOW\n\t\tLike CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,\n\t\tbut for the C preprocessor.\n\tCGO_CXXFLAGS, CGO_CXXFLAGS_ALLOW, CGO_CXXFLAGS_DISALLOW\n\t\tLike CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,\n\t\tbut for the C++ compiler.\n\tCGO_FFLAGS, CGO_FFLAGS_ALLOW, CGO_FFLAGS_DISALLOW\n\t\tLike CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,\n\t\tbut for the Fortran compiler.\n\tCGO_LDFLAGS, CGO_LDFLAGS_ALLOW, CGO_LDFLAGS_DISALLOW\n\t\tLike CGO_CFLAGS, CGO_CFLAGS_ALLOW, and CGO_CFLAGS_DISALLOW,\n\t\tbut for the linker.\n\tCXX\n\t\tThe command to use to compile C++ code.\n\tFC\n\t\tThe command to use to compile Fortran code.\n\tPKG_CONFIG\n\t\tPath to pkg-config tool.\n\nArchitecture-specific environment variables:\n\n\tGOARM\n\t\tFor GOARCH=arm, the ARM architecture for which to compile.\n\t\tValid values are 5, 6, 7.\n\tGO386\n\t\tFor GOARCH=386, how to implement floating point instructions.\n\t\tValid values are sse2 (default), softfloat.\n\tGOMIPS\n\t\tFor GOARCH=mips{,le}, whether to use floating point instructions.\n\t\tValid values are hardfloat (default), softfloat.\n\tGOMIPS64\n\t\tFor GOARCH=mips64{,le}, whether to use floating point instructions.\n\t\tValid values are hardfloat (default), softfloat.\n\tGOPPC64\n\t\tFor GOARCH=ppc64{,le}, the target ISA (Instruction Set Architecture).\n\t\tValid values are power8 (default), power9.\n\tGOWASM\n\t\tFor GOARCH=wasm, comma-separated list of experimental WebAssembly features to use.\n\t\tValid values are satconv, signext.\n\nSpecial-purpose environment variables:\n\n\tGCCGOTOOLDIR\n\t\tIf set, where to find gccgo tools, such as cgo.\n\t\tThe default is based on how gccgo was configured.\n\tGOEXPERIMENT\n\t\tComma-separated list of toolchain experiments to enable or disable.\n\t\tThe list of available experiments may change arbitrarily over time.\n\t\tSee src/internal/goexperiment/flags.go for currently valid values.\n\t\tWarning: This variable is provided for the development and testing\n\t\tof the Go toolchain itself. Use beyond that purpose is unsupported.\n\tGOROOT_FINAL\n\t\tThe root of the installed Go tree, when it is\n\t\tinstalled in a location other than where it is built.\n\t\tFile names in stack traces are rewritten from GOROOT to\n\t\tGOROOT_FINAL.\n\tGO_EXTLINK_ENABLED\n\t\tWhether the linker should use external linking mode\n\t\twhen using -linkmode=auto with code that uses cgo.\n\t\tSet to 0 to disable external linking mode, 1 to enable it.\n\tGIT_ALLOW_PROTOCOL\n\t\tDefined by Git. A colon-separated list of schemes that are allowed\n\t\tto be used with git fetch/clone. If set, any scheme not explicitly\n\t\tmentioned will be considered insecure by 'go get'.\n\t\tBecause the variable is defined by Git, the default value cannot\n\t\tbe set using 'go env -w'.\n\nAdditional information available from 'go env' but not read from the environment:\n\n\tGOEXE\n\t\tThe executable file name suffix (\".exe\" on Windows, \"\" on other systems).\n\tGOGCCFLAGS\n\t\tA space-separated list of arguments supplied to the CC command.\n\tGOHOSTARCH\n\t\tThe architecture (GOARCH) of the Go toolchain binaries.\n\tGOHOSTOS\n\t\tThe operating system (GOOS) of the Go toolchain binaries.\n\tGOMOD\n\t\tThe absolute path to the go.mod of the main module.\n\t\tIf module-aware mode is enabled, but there is no go.mod, GOMOD will be\n\t\tos.DevNull (\"/dev/null\" on Unix-like systems, \"NUL\" on Windows).\n\t\tIf module-aware mode is disabled, GOMOD will be the empty string.\n\tGOTOOLDIR\n\t\tThe directory where the go tools (compile, cover, doc, etc...) are installed.\n\tGOVERSION\n\t\tThe version of the installed Go tree, as reported by runtime.Version.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "filetype",
            "LongName": "filetype",
            "UsageLine": "filetype",
            "Short": "file types",
            "Long": "\nThe go command examines the contents of a restricted set of files\nin each directory. It identifies which files to examine based on\nthe extension of the file name. These extensions are:\n\n\t.go\n\t\tGo source files.\n\t.c, .h\n\t\tC source files.\n\t\tIf the package uses cgo or SWIG, these will be compiled with the\n\t\tOS-native compiler (typically gcc); otherwise they will\n\t\ttrigger an error.\n\t.cc, .cpp, .cxx, .hh, .hpp, .hxx\n\t\tC++ source files. Only useful with cgo or SWIG, and always\n\t\tcompiled with the OS-native compiler.\n\t.m\n\t\tObjective-C source files. Only useful with cgo, and always\n\t\tcompiled with the OS-native compiler.\n\t.s, .S, .sx\n\t\tAssembler source files.\n\t\tIf the package uses cgo or SWIG, these will be assembled with the\n\t\tOS-native assembler (typically gcc (sic)); otherwise they\n\t\twill be assembled with the Go assembler.\n\t.swig, .swigcxx\n\t\tSWIG definition files.\n\t.syso\n\t\tSystem object files.\n\nFiles of each of these types except .syso may contain build\nconstraints, but the go command stops scanning for build constraints\nat the first item in the file that is not a blank line or //-style\nline comment. See the go/build package documentation for\nmore details.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "go.mod",
            "LongName": "go.mod",
            "UsageLine": "go.mod",
            "Short": "the go.mod file",
            "Long": "\nA module version is defined by a tree of source files, with a go.mod\nfile in its root. When the go command is run, it looks in the current\ndirectory and then successive parent directories to find the go.mod\nmarking the root of the main (current) module.\n\nThe go.mod file format is described in detail at\nhttps://golang.org/ref/mod#go-mod-file.\n\nTo create a new go.mod file, use 'go mod init'. For details see\n'go help mod init' or https://golang.org/ref/mod#go-mod-init.\n\nTo add missing module requirements or remove unneeded requirements,\nuse 'go mod tidy'. For details, see 'go help mod tidy' or\nhttps://golang.org/ref/mod#go-mod-tidy.\n\nTo add, upgrade, downgrade, or remove a specific module requirement, use\n'go get'. For details, see 'go help module-get' or\nhttps://golang.org/ref/mod#go-get.\n\nTo make other changes or to parse go.mod as JSON for use by other tools,\nuse 'go mod edit'. See 'go help mod edit' or\nhttps://golang.org/ref/mod#go-mod-edit.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "gopath",
            "LongName": "gopath",
            "UsageLine": "gopath",
            "Short": "GOPATH environment variable",
            "Long": "\nThe Go path is used to resolve import statements.\nIt is implemented by and documented in the go/build package.\n\nThe GOPATH environment variable lists places to look for Go code.\nOn Unix, the value is a colon-separated string.\nOn Windows, the value is a semicolon-separated string.\nOn Plan 9, the value is a list.\n\nIf the environment variable is unset, GOPATH defaults\nto a subdirectory named \"go\" in the user's home directory\n($HOME/go on Unix, %USERPROFILE%\\go on Windows),\nunless that directory holds a Go distribution.\nRun \"go env GOPATH\" to see the current GOPATH.\n\nSee https://golang.org/wiki/SettingGOPATH to set a custom GOPATH.\n\nEach directory listed in GOPATH must have a prescribed structure:\n\nThe src directory holds source code. The path below src\ndetermines the import path or executable name.\n\nThe pkg directory holds installed package objects.\nAs in the Go tree, each target operating system and\narchitecture pair has its own subdirectory of pkg\n(pkg/GOOS_GOARCH).\n\nIf DIR is a directory listed in the GOPATH, a package with\nsource in DIR/src/foo/bar can be imported as \"foo/bar\" and\nhas its compiled form installed to \"DIR/pkg/GOOS_GOARCH/foo/bar.a\".\n\nThe bin directory holds compiled commands.\nEach command is named for its source directory, but only\nthe final element, not the entire path. That is, the\ncommand with source in DIR/src/foo/quux is installed into\nDIR/bin/quux, not DIR/bin/foo/quux. The \"foo/\" prefix is stripped\nso that you can add DIR/bin to your PATH to get at the\ninstalled commands. If the GOBIN environment variable is\nset, commands are installed to the directory it names instead\nof DIR/bin. GOBIN must be an absolute path.\n\nHere's an example directory layout:\n\n    GOPATH=/home/user/go\n\n    /home/user/go/\n        src/\n            foo/\n                bar/               (go code in package bar)\n                    x.go\n                quux/              (go code in package main)\n                    y.go\n        bin/\n            quux                   (installed command)\n        pkg/\n            linux_amd64/\n                foo/\n                    bar.a          (installed package object)\n\nGo searches each directory listed in GOPATH to find source code,\nbut new packages are always downloaded into the first directory\nin the list.\n\nSee https://golang.org/doc/code.html for an example.\n\nGOPATH and Modules\n\nWhen using modules, GOPATH is no longer used for resolving imports.\nHowever, it is still used to store downloaded source code (in GOPATH/pkg/mod)\nand compiled commands (in GOPATH/bin).\n\nInternal Directories\n\nCode in or below a directory named \"internal\" is importable only\nby code in the directory tree rooted at the parent of \"internal\".\nHere's an extended version of the directory layout above:\n\n    /home/user/go/\n        src/\n            crash/\n                bang/              (go code in package bang)\n                    b.go\n            foo/                   (go code in package foo)\n                f.go\n                bar/               (go code in package bar)\n                    x.go\n                internal/\n                    baz/           (go code in package baz)\n                        z.go\n                quux/              (go code in package main)\n                    y.go\n\n\nThe code in z.go is imported as \"foo/internal/baz\", but that\nimport statement can only appear in source files in the subtree\nrooted at foo. The source files foo/f.go, foo/bar/x.go, and\nfoo/quux/y.go can all import \"foo/internal/baz\", but the source file\ncrash/bang/b.go cannot.\n\nSee https://golang.org/s/go14internal for details.\n\nVendor Directories\n\nGo 1.6 includes support for using local copies of external dependencies\nto satisfy imports of those dependencies, often referred to as vendoring.\n\nCode below a directory named \"vendor\" is importable only\nby code in the directory tree rooted at the parent of \"vendor\",\nand only using an import path that omits the prefix up to and\nincluding the vendor element.\n\nHere's the example from the previous section,\nbut with the \"internal\" directory renamed to \"vendor\"\nand a new foo/vendor/crash/bang directory added:\n\n    /home/user/go/\n        src/\n            crash/\n                bang/              (go code in package bang)\n                    b.go\n            foo/                   (go code in package foo)\n                f.go\n                bar/               (go code in package bar)\n                    x.go\n                vendor/\n                    crash/\n                        bang/      (go code in package bang)\n                            b.go\n                    baz/           (go code in package baz)\n                        z.go\n                quux/              (go code in package main)\n                    y.go\n\nThe same visibility rules apply as for internal, but the code\nin z.go is imported as \"baz\", not as \"foo/vendor/baz\".\n\nCode in vendor directories deeper in the source tree shadows\ncode in higher directories. Within the subtree rooted at foo, an import\nof \"crash/bang\" resolves to \"foo/vendor/crash/bang\", not the\ntop-level \"crash/bang\".\n\nCode in vendor directories is not subject to import path\nchecking (see 'go help importpath').\n\nWhen 'go get' checks out or updates a git repository, it now also\nupdates submodules.\n\nVendor directories do not affect the placement of new repositories\nbeing checked out for the first time by 'go get': those are always\nplaced in the main GOPATH, never in a vendor subtree.\n\nSee https://golang.org/s/go15vendor for details.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "gopath-get",
            "LongName": "gopath-get",
            "UsageLine": "gopath-get",
            "Short": "legacy GOPATH go get",
            "Long": "\nThe 'go get' command changes behavior depending on whether the\ngo command is running in module-aware mode or legacy GOPATH mode.\nThis help text, accessible as 'go help gopath-get' even in module-aware mode,\ndescribes 'go get' as it operates in legacy GOPATH mode.\n\nUsage: go get [-d] [-f] [-t] [-u] [-v] [-fix] [build flags] [packages]\n\nGet downloads the packages named by the import paths, along with their\ndependencies. It then installs the named packages, like 'go install'.\n\nThe -d flag instructs get to stop after downloading the packages; that is,\nit instructs get not to install the packages.\n\nThe -f flag, valid only when -u is set, forces get -u not to verify that\neach package has been checked out from the source control repository\nimplied by its import path. This can be useful if the source is a local fork\nof the original.\n\nThe -fix flag instructs get to run the fix tool on the downloaded packages\nbefore resolving dependencies or building the code.\n\nThe -t flag instructs get to also download the packages required to build\nthe tests for the specified packages.\n\nThe -u flag instructs get to use the network to update the named packages\nand their dependencies. By default, get uses the network to check out\nmissing packages but does not use it to look for updates to existing packages.\n\nThe -v flag enables verbose progress and debug output.\n\nGet also accepts build flags to control the installation. See 'go help build'.\n\nWhen checking out a new package, get creates the target directory\nGOPATH/src/\u003cimport-path\u003e. If the GOPATH contains multiple entries,\nget uses the first one. For more details see: 'go help gopath'.\n\nWhen checking out or updating a package, get looks for a branch or tag\nthat matches the locally installed version of Go. The most important\nrule is that if the local installation is running version \"go1\", get\nsearches for a branch or tag named \"go1\". If no such version exists\nit retrieves the default branch of the package.\n\nWhen go get checks out or updates a Git repository,\nit also updates any git submodules referenced by the repository.\n\nGet never checks out or updates code stored in vendor directories.\n\nFor more about specifying packages, see 'go help packages'.\n\nFor more about how 'go get' finds source code to\ndownload, see 'go help importpath'.\n\nThis text describes the behavior of get when using GOPATH\nto manage source code and dependencies.\nIf instead the go command is running in module-aware mode,\nthe details of get's flags and effects change, as does 'go help get'.\nSee 'go help modules' and 'go help module-get'.\n\nSee also: go build, go install, go clean.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "goproxy",
            "LongName": "goproxy",
            "UsageLine": "goproxy",
            "Short": "module proxy protocol",
            "Long": "\nA Go module proxy is any web server that can respond to GET requests for\nURLs of a specified form. The requests have no query parameters, so even\na site serving from a fixed file system (including a file:/// URL)\ncan be a module proxy.\n\nFor details on the GOPROXY protocol, see\nhttps://golang.org/ref/mod#goproxy-protocol.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "importpath",
            "LongName": "importpath",
            "UsageLine": "importpath",
            "Short": "import path syntax",
            "Long": "\n\nAn import path (see 'go help packages') denotes a package stored in the local\nfile system. In general, an import path denotes either a standard package (such\nas \"unicode/utf8\") or a package found in one of the work spaces (For more\ndetails see: 'go help gopath').\n\nRelative import paths\n\nAn import path beginning with ./ or ../ is called a relative path.\nThe toolchain supports relative import paths as a shortcut in two ways.\n\nFirst, a relative path can be used as a shorthand on the command line.\nIf you are working in the directory containing the code imported as\n\"unicode\" and want to run the tests for \"unicode/utf8\", you can type\n\"go test ./utf8\" instead of needing to specify the full path.\nSimilarly, in the reverse situation, \"go test ..\" will test \"unicode\" from\nthe \"unicode/utf8\" directory. Relative patterns are also allowed, like\n\"go test ./...\" to test all subdirectories. See 'go help packages' for details\non the pattern syntax.\n\nSecond, if you are compiling a Go program not in a work space,\nyou can use a relative path in an import statement in that program\nto refer to nearby code also not in a work space.\nThis makes it easy to experiment with small multipackage programs\noutside of the usual work spaces, but such programs cannot be\ninstalled with \"go install\" (there is no work space in which to install them),\nso they are rebuilt from scratch each time they are built.\nTo avoid ambiguity, Go programs cannot use relative import paths\nwithin a work space.\n\nRemote import paths\n\nCertain import paths also\ndescribe how to obtain the source code for the package using\na revision control system.\n\nA few common code hosting sites have special syntax:\n\n\tBitbucket (Git, Mercurial)\n\n\t\timport \"bitbucket.org/user/project\"\n\t\timport \"bitbucket.org/user/project/sub/directory\"\n\n\tGitHub (Git)\n\n\t\timport \"github.com/user/project\"\n\t\timport \"github.com/user/project/sub/directory\"\n\n\tLaunchpad (Bazaar)\n\n\t\timport \"launchpad.net/project\"\n\t\timport \"launchpad.net/project/series\"\n\t\timport \"launchpad.net/project/series/sub/directory\"\n\n\t\timport \"launchpad.net/~user/project/branch\"\n\t\timport \"launchpad.net/~user/project/branch/sub/directory\"\n\n\tIBM DevOps Services (Git)\n\n\t\timport \"hub.jazz.net/git/user/project\"\n\t\timport \"hub.jazz.net/git/user/project/sub/directory\"\n\nFor code hosted on other servers, import paths may either be qualified\nwith the version control type, or the go tool can dynamically fetch\nthe import path over https/http and discover where the code resides\nfrom a \u003cmeta\u003e tag in the HTML.\n\nTo declare the code location, an import path of the form\n\n\trepository.vcs/path\n\nspecifies the given repository, with or without the .vcs suffix,\nusing the named version control system, and then the path inside\nthat repository. The supported version control systems are:\n\n\tBazaar      .bzr\n\tFossil      .fossil\n\tGit         .git\n\tMercurial   .hg\n\tSubversion  .svn\n\nFor example,\n\n\timport \"example.org/user/foo.hg\"\n\ndenotes the root directory of the Mercurial repository at\nexample.org/user/foo or foo.hg, and\n\n\timport \"example.org/repo.git/foo/bar\"\n\ndenotes the foo/bar directory of the Git repository at\nexample.org/repo or repo.git.\n\nWhen a version control system supports multiple protocols,\neach is tried in turn when downloading. For example, a Git\ndownload tries https://, then git+ssh://.\n\nBy default, downloads are restricted to known secure protocols\n(e.g. https, ssh). To override this setting for Git downloads, the\nGIT_ALLOW_PROTOCOL environment variable can be set (For more details see:\n'go help environment').\n\nIf the import path is not a known code hosting site and also lacks a\nversion control qualifier, the go tool attempts to fetch the import\nover https/http and looks for a \u003cmeta\u003e tag in the document's HTML\n\u003chead\u003e.\n\nThe meta tag has the form:\n\n\t\u003cmeta name=\"go-import\" content=\"import-prefix vcs repo-root\"\u003e\n\nThe import-prefix is the import path corresponding to the repository\nroot. It must be a prefix or an exact match of the package being\nfetched with \"go get\". If it's not an exact match, another http\nrequest is made at the prefix to verify the \u003cmeta\u003e tags match.\n\nThe meta tag should appear as early in the file as possible.\nIn particular, it should appear before any raw JavaScript or CSS,\nto avoid confusing the go command's restricted parser.\n\nThe vcs is one of \"bzr\", \"fossil\", \"git\", \"hg\", \"svn\".\n\nThe repo-root is the root of the version control system\ncontaining a scheme and not containing a .vcs qualifier.\n\nFor example,\n\n\timport \"example.org/pkg/foo\"\n\nwill result in the following requests:\n\n\thttps://example.org/pkg/foo?go-get=1 (preferred)\n\thttp://example.org/pkg/foo?go-get=1  (fallback, only with use of correctly set GOINSECURE)\n\nIf that page contains the meta tag\n\n\t\u003cmeta name=\"go-import\" content=\"example.org git https://code.org/r/p/exproj\"\u003e\n\nthe go tool will verify that https://example.org/?go-get=1 contains the\nsame meta tag and then git clone https://code.org/r/p/exproj into\nGOPATH/src/example.org.\n\nWhen using GOPATH, downloaded packages are written to the first directory\nlisted in the GOPATH environment variable.\n(See 'go help gopath-get' and 'go help gopath'.)\n\nWhen using modules, downloaded packages are stored in the module cache.\nSee https://golang.org/ref/mod#module-cache.\n\nWhen using modules, an additional variant of the go-import meta tag is\nrecognized and is preferred over those listing version control systems.\nThat variant uses \"mod\" as the vcs in the content value, as in:\n\n\t\u003cmeta name=\"go-import\" content=\"example.org mod https://code.org/moduleproxy\"\u003e\n\nThis tag means to fetch modules with paths beginning with example.org\nfrom the module proxy available at the URL https://code.org/moduleproxy.\nSee https://golang.org/ref/mod#goproxy-protocol for details about the\nproxy protocol.\n\nImport path checking\n\nWhen the custom import path feature described above redirects to a\nknown code hosting site, each of the resulting packages has two possible\nimport paths, using the custom domain or the known hosting site.\n\nA package statement is said to have an \"import comment\" if it is immediately\nfollowed (before the next newline) by a comment of one of these two forms:\n\n\tpackage math // import \"path\"\n\tpackage math /* import \"path\" */\n\nThe go command will refuse to install a package with an import comment\nunless it is being referred to by that import path. In this way, import comments\nlet package authors make sure the custom import path is used and not a\ndirect path to the underlying code hosting site.\n\nImport path checking is disabled for code found within vendor trees.\nThis makes it possible to copy code into alternate locations in vendor trees\nwithout needing to update import comments.\n\nImport path checking is also disabled when using modules.\nImport path comments are obsoleted by the go.mod file's module statement.\n\nSee https://golang.org/s/go14customimport for details.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "modules",
            "LongName": "modules",
            "UsageLine": "modules",
            "Short": "modules, module versions, and more",
            "Long": "\nModules are how Go manages dependencies.\n\nA module is a collection of packages that are released, versioned, and\ndistributed together. Modules may be downloaded directly from version control\nrepositories or from module proxy servers.\n\nFor a series of tutorials on modules, see\nhttps://golang.org/doc/tutorial/create-module.\n\nFor a detailed reference on modules, see https://golang.org/ref/mod.\n\nBy default, the go command may download modules from https://proxy.golang.org.\nIt may authenticate modules using the checksum database at\nhttps://sum.golang.org. Both services are operated by the Go team at Google.\nThe privacy policies for these services are available at\nhttps://proxy.golang.org/privacy and https://sum.golang.org/privacy,\nrespectively.\n\nThe go command's download behavior may be configured using GOPROXY, GOSUMDB,\nGOPRIVATE, and other environment variables. See 'go help environment'\nand https://golang.org/ref/mod#private-module-privacy for more information.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "module-get",
            "LongName": "module-get",
            "UsageLine": "module-get",
            "Short": "module-aware go get",
            "Long": "\nThe 'go get' command changes behavior depending on whether the\ngo command is running in module-aware mode or legacy GOPATH mode.\nThis help text, accessible as 'go help module-get' even in legacy GOPATH mode,\ndescribes 'go get' as it operates in module-aware mode.\n\nUsage: go get [-d] [-t] [-u] [-v] [build flags] [packages]\n\nGet resolves its command-line arguments to packages at specific module versions,\nupdates go.mod to require those versions, downloads source code into the\nmodule cache, then builds and installs the named packages.\n\nTo add a dependency for a package or upgrade it to its latest version:\n\n\tgo get example.com/pkg\n\nTo upgrade or downgrade a package to a specific version:\n\n\tgo get example.com/pkg@v1.2.3\n\nTo remove a dependency on a module and downgrade modules that require it:\n\n\tgo get example.com/mod@none\n\nSee https://golang.org/ref/mod#go-get for details.\n\nThe 'go install' command may be used to build and install packages. When a\nversion is specified, 'go install' runs in module-aware mode and ignores\nthe go.mod file in the current directory. For example:\n\n\tgo install example.com/pkg@v1.2.3\n\tgo install example.com/pkg@latest\n\nSee 'go help install' or https://golang.org/ref/mod#go-install for details.\n\nIn addition to build flags (listed in 'go help build') 'go get' accepts the\nfollowing flags.\n\nThe -t flag instructs get to consider modules needed to build tests of\npackages specified on the command line.\n\nThe -u flag instructs get to update modules providing dependencies\nof packages named on the command line to use newer minor or patch\nreleases when available.\n\nThe -u=patch flag (not -u patch) also instructs get to update dependencies,\nbut changes the default to select patch releases.\n\nWhen the -t and -u flags are used together, get will update\ntest dependencies as well.\n\nThe -d flag instructs get not to build or install packages. get will only\nupdate go.mod and download source code needed to build packages.\n\nBuilding and installing packages with get is deprecated. In a future release,\nthe -d flag will be enabled by default, and 'go get' will be only be used to\nadjust dependencies of the current module. To install a package using\ndependencies from the current module, use 'go install'. To install a package\nignoring the current module, use 'go install' with an @version suffix like\n\"@latest\" after each argument.\n\nFor more about modules, see https://golang.org/ref/mod.\n\nFor more about specifying packages, see 'go help packages'.\n\nThis text describes the behavior of get using modules to manage source\ncode and dependencies. If instead the go command is running in GOPATH\nmode, the details of get's flags and effects change, as does 'go help get'.\nSee 'go help gopath-get'.\n\nSee also: go build, go install, go clean, go mod.\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "module-auth",
            "LongName": "module-auth",
            "UsageLine": "module-auth",
            "Short": "module authentication using go.sum",
            "Long": "\nWhen the go command downloads a module zip file or go.mod file into the\nmodule cache, it computes a cryptographic hash and compares it with a known\nvalue to verify the file hasn't changed since it was first downloaded. Known\nhashes are stored in a file in the module root directory named go.sum. Hashes\nmay also be downloaded from the checksum database depending on the values of\nGOSUMDB, GOPRIVATE, and GONOSUMDB.\n\nFor details, see https://golang.org/ref/mod#authenticating.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "packages",
            "LongName": "packages",
            "UsageLine": "packages",
            "Short": "package lists and patterns",
            "Long": "\nMany commands apply to a set of packages:\n\n\tgo action [packages]\n\nUsually, [packages] is a list of import paths.\n\nAn import path that is a rooted path or that begins with\na . or .. element is interpreted as a file system path and\ndenotes the package in that directory.\n\nOtherwise, the import path P denotes the package found in\nthe directory DIR/src/P for some DIR listed in the GOPATH\nenvironment variable (For more details see: 'go help gopath').\n\nIf no import paths are given, the action applies to the\npackage in the current directory.\n\nThere are four reserved names for paths that should not be used\nfor packages to be built with the go tool:\n\n- \"main\" denotes the top-level package in a stand-alone executable.\n\n- \"all\" expands to all packages found in all the GOPATH\ntrees. For example, 'go list all' lists all the packages on the local\nsystem. When using modules, \"all\" expands to all packages in\nthe main module and their dependencies, including dependencies\nneeded by tests of any of those.\n\n- \"std\" is like all but expands to just the packages in the standard\nGo library.\n\n- \"cmd\" expands to the Go repository's commands and their\ninternal libraries.\n\nImport paths beginning with \"cmd/\" only match source code in\nthe Go repository.\n\nAn import path is a pattern if it includes one or more \"...\" wildcards,\neach of which can match any string, including the empty string and\nstrings containing slashes. Such a pattern expands to all package\ndirectories found in the GOPATH trees with names matching the\npatterns.\n\nTo make common patterns more convenient, there are two special cases.\nFirst, /... at the end of the pattern can match an empty string,\nso that net/... matches both net and packages in its subdirectories, like net/http.\nSecond, any slash-separated pattern element containing a wildcard never\nparticipates in a match of the \"vendor\" element in the path of a vendored\npackage, so that ./... does not match packages in subdirectories of\n./vendor or ./mycode/vendor, but ./vendor/... and ./mycode/vendor/... do.\nNote, however, that a directory named vendor that itself contains code\nis not a vendored package: cmd/vendor would be a command named vendor,\nand the pattern cmd/... matches it.\nSee golang.org/s/go15vendor for more about vendoring.\n\nAn import path can also name a package to be downloaded from\na remote repository. Run 'go help importpath' for details.\n\nEvery package in a program must have a unique import path.\nBy convention, this is arranged by starting each path with a\nunique prefix that belongs to you. For example, paths used\ninternally at Google all begin with 'google', and paths\ndenoting remote repositories begin with the path to the code,\nsuch as 'github.com/user/repo'.\n\nPackages in a program need not have unique package names,\nbut there are two reserved package names with special meaning.\nThe name main indicates a command, not a library.\nCommands are built into binaries and cannot be imported.\nThe name documentation indicates documentation for\na non-Go program in the directory. Files in package documentation\nare ignored by the go command.\n\nAs a special case, if the package list is a list of .go files from a\nsingle directory, the command is applied to a single synthesized\npackage made up of exactly those files, ignoring any build constraints\nin those files and ignoring any other files in the directory.\n\nDirectory and file names that begin with \".\" or \"_\" are ignored\nby the go tool, as are directories named \"testdata\".\n\t",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "private",
            "LongName": "private",
            "UsageLine": "private",
            "Short": "configuration for downloading non-public code",
            "Long": "\nThe go command defaults to downloading modules from the public Go module\nmirror at proxy.golang.org. It also defaults to validating downloaded modules,\nregardless of source, against the public Go checksum database at sum.golang.org.\nThese defaults work well for publicly available source code.\n\nThe GOPRIVATE environment variable controls which modules the go command\nconsiders to be private (not available publicly) and should therefore not use\nthe proxy or checksum database. The variable is a comma-separated list of\nglob patterns (in the syntax of Go's path.Match) of module path prefixes.\nFor example,\n\n\tGOPRIVATE=*.corp.example.com,rsc.io/private\n\ncauses the go command to treat as private any module with a path prefix\nmatching either pattern, including git.corp.example.com/xyzzy, rsc.io/private,\nand rsc.io/private/quux.\n\nFor fine-grained control over module download and validation, the GONOPROXY\nand GONOSUMDB environment variables accept the same kind of glob list\nand override GOPRIVATE for the specific decision of whether to use the proxy\nand checksum database, respectively.\n\nFor example, if a company ran a module proxy serving private modules,\nusers would configure go using:\n\n\tGOPRIVATE=*.corp.example.com\n\tGOPROXY=proxy.example.com\n\tGONOPROXY=none\n\nThe GOPRIVATE variable is also used to define the \"public\" and \"private\"\npatterns for the GOVCS variable; see 'go help vcs'. For that usage,\nGOPRIVATE applies even in GOPATH mode. In that case, it matches import paths\ninstead of module paths.\n\nThe 'go env -w' command (see 'go help env') can be used to set these variables\nfor future go command invocations.\n\nFor more details, see https://golang.org/ref/mod#private-modules.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "testflag",
            "LongName": "testflag",
            "UsageLine": "testflag",
            "Short": "testing flags",
            "Long": "\nThe 'go test' command takes both flags that apply to 'go test' itself\nand flags that apply to the resulting test binary.\n\nSeveral of the flags control profiling and write an execution profile\nsuitable for \"go tool pprof\"; run \"go tool pprof -h\" for more\ninformation. The --alloc_space, --alloc_objects, and --show_bytes\noptions of pprof control how the information is presented.\n\nThe following flags are recognized by the 'go test' command and\ncontrol the execution of any test:\n\n\t-bench regexp\n\t    Run only those benchmarks matching a regular expression.\n\t    By default, no benchmarks are run.\n\t    To run all benchmarks, use '-bench .' or '-bench=.'.\n\t    The regular expression is split by unbracketed slash (/)\n\t    characters into a sequence of regular expressions, and each\n\t    part of a benchmark's identifier must match the corresponding\n\t    element in the sequence, if any. Possible parents of matches\n\t    are run with b.N=1 to identify sub-benchmarks. For example,\n\t    given -bench=X/Y, top-level benchmarks matching X are run\n\t    with b.N=1 to find any sub-benchmarks matching Y, which are\n\t    then run in full.\n\n\t-benchtime t\n\t    Run enough iterations of each benchmark to take t, specified\n\t    as a time.Duration (for example, -benchtime 1h30s).\n\t    The default is 1 second (1s).\n\t    The special syntax Nx means to run the benchmark N times\n\t    (for example, -benchtime 100x).\n\n\t-count n\n\t    Run each test and benchmark n times (default 1).\n\t    If -cpu is set, run n times for each GOMAXPROCS value.\n\t    Examples are always run once.\n\n\t-cover\n\t    Enable coverage analysis.\n\t    Note that because coverage works by annotating the source\n\t    code before compilation, compilation and test failures with\n\t    coverage enabled may report line numbers that don't correspond\n\t    to the original sources.\n\n\t-covermode set,count,atomic\n\t    Set the mode for coverage analysis for the package[s]\n\t    being tested. The default is \"set\" unless -race is enabled,\n\t    in which case it is \"atomic\".\n\t    The values:\n\t\tset: bool: does this statement run?\n\t\tcount: int: how many times does this statement run?\n\t\tatomic: int: count, but correct in multithreaded tests;\n\t\t\tsignificantly more expensive.\n\t    Sets -cover.\n\n\t-coverpkg pattern1,pattern2,pattern3\n\t    Apply coverage analysis in each test to packages matching the patterns.\n\t    The default is for each test to analyze only the package being tested.\n\t    See 'go help packages' for a description of package patterns.\n\t    Sets -cover.\n\n\t-cpu 1,2,4\n\t    Specify a list of GOMAXPROCS values for which the tests or\n\t    benchmarks should be executed. The default is the current value\n\t    of GOMAXPROCS.\n\n\t-failfast\n\t    Do not start new tests after the first test failure.\n\n\t-list regexp\n\t    List tests, benchmarks, or examples matching the regular expression.\n\t    No tests, benchmarks or examples will be run. This will only\n\t    list top-level tests. No subtest or subbenchmarks will be shown.\n\n\t-parallel n\n\t    Allow parallel execution of test functions that call t.Parallel.\n\t    The value of this flag is the maximum number of tests to run\n\t    simultaneously; by default, it is set to the value of GOMAXPROCS.\n\t    Note that -parallel only applies within a single test binary.\n\t    The 'go test' command may run tests for different packages\n\t    in parallel as well, according to the setting of the -p flag\n\t    (see 'go help build').\n\n\t-run regexp\n\t    Run only those tests and examples matching the regular expression.\n\t    For tests, the regular expression is split by unbracketed slash (/)\n\t    characters into a sequence of regular expressions, and each part\n\t    of a test's identifier must match the corresponding element in\n\t    the sequence, if any. Note that possible parents of matches are\n\t    run too, so that -run=X/Y matches and runs and reports the result\n\t    of all tests matching X, even those without sub-tests matching Y,\n\t    because it must run them to look for those sub-tests.\n\n\t-short\n\t    Tell long-running tests to shorten their run time.\n\t    It is off by default but set during all.bash so that installing\n\t    the Go tree can run a sanity check but not spend time running\n\t    exhaustive tests.\n\n\t-shuffle off,on,N\n\t\tRandomize the execution order of tests and benchmarks.\n\t\tIt is off by default. If -shuffle is set to on, then it will seed\n\t\tthe randomizer using the system clock. If -shuffle is set to an\n\t\tinteger N, then N will be used as the seed value. In both cases,\n\t\tthe seed will be reported for reproducibility.\n\n\t-timeout d\n\t    If a test binary runs longer than duration d, panic.\n\t    If d is 0, the timeout is disabled.\n\t    The default is 10 minutes (10m).\n\n\t-v\n\t    Verbose output: log all tests as they are run. Also print all\n\t    text from Log and Logf calls even if the test succeeds.\n\n\t-vet list\n\t    Configure the invocation of \"go vet\" during \"go test\"\n\t    to use the comma-separated list of vet checks.\n\t    If list is empty, \"go test\" runs \"go vet\" with a curated list of\n\t    checks believed to be always worth addressing.\n\t    If list is \"off\", \"go test\" does not run \"go vet\" at all.\n\nThe following flags are also recognized by 'go test' and can be used to\nprofile the tests during execution:\n\n\t-benchmem\n\t    Print memory allocation statistics for benchmarks.\n\n\t-blockprofile block.out\n\t    Write a goroutine blocking profile to the specified file\n\t    when all tests are complete.\n\t    Writes test binary as -c would.\n\n\t-blockprofilerate n\n\t    Control the detail provided in goroutine blocking profiles by\n\t    calling runtime.SetBlockProfileRate with n.\n\t    See 'go doc runtime.SetBlockProfileRate'.\n\t    The profiler aims to sample, on average, one blocking event every\n\t    n nanoseconds the program spends blocked. By default,\n\t    if -test.blockprofile is set without this flag, all blocking events\n\t    are recorded, equivalent to -test.blockprofilerate=1.\n\n\t-coverprofile cover.out\n\t    Write a coverage profile to the file after all tests have passed.\n\t    Sets -cover.\n\n\t-cpuprofile cpu.out\n\t    Write a CPU profile to the specified file before exiting.\n\t    Writes test binary as -c would.\n\n\t-memprofile mem.out\n\t    Write an allocation profile to the file after all tests have passed.\n\t    Writes test binary as -c would.\n\n\t-memprofilerate n\n\t    Enable more precise (and expensive) memory allocation profiles by\n\t    setting runtime.MemProfileRate. See 'go doc runtime.MemProfileRate'.\n\t    To profile all memory allocations, use -test.memprofilerate=1.\n\n\t-mutexprofile mutex.out\n\t    Write a mutex contention profile to the specified file\n\t    when all tests are complete.\n\t    Writes test binary as -c would.\n\n\t-mutexprofilefraction n\n\t    Sample 1 in n stack traces of goroutines holding a\n\t    contended mutex.\n\n\t-outputdir directory\n\t    Place output files from profiling in the specified directory,\n\t    by default the directory in which \"go test\" is running.\n\n\t-trace trace.out\n\t    Write an execution trace to the specified file before exiting.\n\nEach of these flags is also recognized with an optional 'test.' prefix,\nas in -test.v. When invoking the generated test binary (the result of\n'go test -c') directly, however, the prefix is mandatory.\n\nThe 'go test' command rewrites or removes recognized flags,\nas appropriate, both before and after the optional package list,\nbefore invoking the test binary.\n\nFor instance, the command\n\n\tgo test -v -myflag testdata -cpuprofile=prof.out -x\n\nwill compile the test binary and then run it as\n\n\tpkg.test -test.v -myflag testdata -test.cpuprofile=prof.out\n\n(The -x flag is removed because it applies only to the go command's\nexecution, not to the test itself.)\n\nThe test flags that generate profiles (other than for coverage) also\nleave the test binary in pkg.test for use when analyzing the profiles.\n\nWhen 'go test' runs a test binary, it does so from within the\ncorresponding package's source code directory. Depending on the test,\nit may be necessary to do the same when invoking a generated test\nbinary directly.\n\nThe command-line package list, if present, must appear before any\nflag not known to the go test command. Continuing the example above,\nthe package list would have to appear before -myflag, but could appear\non either side of -v.\n\nWhen 'go test' runs in package list mode, 'go test' caches successful\npackage test results to avoid unnecessary repeated running of tests. To\ndisable test caching, use any test flag or argument other than the\ncacheable flags. The idiomatic way to disable test caching explicitly\nis to use -count=1.\n\nTo keep an argument for a test binary from being interpreted as a\nknown flag or a package name, use -args (see 'go help test') which\npasses the remainder of the command line through to the test binary\nuninterpreted and unaltered.\n\nFor instance, the command\n\n\tgo test -v -args -x -v\n\nwill compile the test binary and then run it as\n\n\tpkg.test -test.v -x -v\n\nSimilarly,\n\n\tgo test -args math\n\nwill compile the test binary and then run it as\n\n\tpkg.test math\n\nIn the first example, the -x and the second -v are passed through to the\ntest binary unchanged and with no effect on the go command itself.\nIn the second example, the argument math is passed through to the test\nbinary, instead of being interpreted as the package list.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "testfunc",
            "LongName": "testfunc",
            "UsageLine": "testfunc",
            "Short": "testing functions",
            "Long": "\nThe 'go test' command expects to find test, benchmark, and example functions\nin the \"*_test.go\" files corresponding to the package under test.\n\nA test function is one named TestXxx (where Xxx does not start with a\nlower case letter) and should have the signature,\n\n\tfunc TestXxx(t *testing.T) { ... }\n\nA benchmark function is one named BenchmarkXxx and should have the signature,\n\n\tfunc BenchmarkXxx(b *testing.B) { ... }\n\nAn example function is similar to a test function but, instead of using\n*testing.T to report success or failure, prints output to os.Stdout.\nIf the last comment in the function starts with \"Output:\" then the output\nis compared exactly against the comment (see examples below). If the last\ncomment begins with \"Unordered output:\" then the output is compared to the\ncomment, however the order of the lines is ignored. An example with no such\ncomment is compiled but not executed. An example with no text after\n\"Output:\" is compiled, executed, and expected to produce no output.\n\nGodoc displays the body of ExampleXxx to demonstrate the use\nof the function, constant, or variable Xxx. An example of a method M with\nreceiver type T or *T is named ExampleT_M. There may be multiple examples\nfor a given function, constant, or variable, distinguished by a trailing _xxx,\nwhere xxx is a suffix not beginning with an upper case letter.\n\nHere is an example of an example:\n\n\tfunc ExamplePrintln() {\n\t\tPrintln(\"The output of\\nthis example.\")\n\t\t// Output: The output of\n\t\t// this example.\n\t}\n\nHere is another example where the ordering of the output is ignored:\n\n\tfunc ExamplePerm() {\n\t\tfor _, value := range Perm(4) {\n\t\t\tfmt.Println(value)\n\t\t}\n\n\t\t// Unordered output: 4\n\t\t// 2\n\t\t// 1\n\t\t// 3\n\t\t// 0\n\t}\n\nThe entire test file is presented as the example when it contains a single\nexample function, at least one other function, type, variable, or constant\ndeclaration, and no test or benchmark functions.\n\nSee the documentation of the testing package for more information.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "vcs",
            "LongName": "vcs",
            "UsageLine": "vcs",
            "Short": "controlling version control with GOVCS",
            "Long": "\nThe 'go get' command can run version control commands like git\nto download imported code. This functionality is critical to the decentralized\nGo package ecosystem, in which code can be imported from any server,\nbut it is also a potential security problem, if a malicious server finds a\nway to cause the invoked version control command to run unintended code.\n\nTo balance the functionality and security concerns, the 'go get' command\nby default will only use git and hg to download code from public servers.\nBut it will use any known version control system (bzr, fossil, git, hg, svn)\nto download code from private servers, defined as those hosting packages\nmatching the GOPRIVATE variable (see 'go help private'). The rationale behind\nallowing only Git and Mercurial is that these two systems have had the most\nattention to issues of being run as clients of untrusted servers. In contrast,\nBazaar, Fossil, and Subversion have primarily been used in trusted,\nauthenticated environments and are not as well scrutinized as attack surfaces.\n\nThe version control command restrictions only apply when using direct version\ncontrol access to download code. When downloading modules from a proxy,\n'go get' uses the proxy protocol instead, which is always permitted.\nBy default, the 'go get' command uses the Go module mirror (proxy.golang.org)\nfor public packages and only falls back to version control for private\npackages or when the mirror refuses to serve a public package (typically for\nlegal reasons). Therefore, clients can still access public code served from\nBazaar, Fossil, or Subversion repositories by default, because those downloads\nuse the Go module mirror, which takes on the security risk of running the\nversion control commands using a custom sandbox.\n\nThe GOVCS variable can be used to change the allowed version control systems\nfor specific packages (identified by a module or import path).\nThe GOVCS variable applies when building package in both module-aware mode\nand GOPATH mode. When using modules, the patterns match against the module path.\nWhen using GOPATH, the patterns match against the import path corresponding to\nthe root of the version control repository.\n\nThe general form of the GOVCS setting is a comma-separated list of\npattern:vcslist rules. The pattern is a glob pattern that must match\none or more leading elements of the module or import path. The vcslist\nis a pipe-separated list of allowed version control commands, or \"all\"\nto allow use of any known command, or \"off\" to disallow all commands.\nNote that if a module matches a pattern with vcslist \"off\", it may still be\ndownloaded if the origin server uses the \"mod\" scheme, which instructs the\ngo command to download the module using the GOPROXY protocol.\nThe earliest matching pattern in the list applies, even if later patterns\nmight also match.\n\nFor example, consider:\n\n\tGOVCS=github.com:git,evil.com:off,*:git|hg\n\nWith this setting, code with a module or import path beginning with\ngithub.com/ can only use git; paths on evil.com cannot use any version\ncontrol command, and all other paths (* matches everything) can use\nonly git or hg.\n\nThe special patterns \"public\" and \"private\" match public and private\nmodule or import paths. A path is private if it matches the GOPRIVATE\nvariable; otherwise it is public.\n\nIf no rules in the GOVCS variable match a particular module or import path,\nthe 'go get' command applies its default rule, which can now be summarized\nin GOVCS notation as 'public:git|hg,private:all'.\n\nTo allow unfettered use of any version control system for any package, use:\n\n\tGOVCS=*:all\n\nTo disable all use of version control, use:\n\n\tGOVCS=*:off\n\nThe 'go env -w' command (see 'go help env') can be used to set the GOVCS\nvariable for future go command invocations.\n",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        },
        {
            "Name": "cmds",
            "LongName": "cmds",
            "UsageLine": "go cmds",
            "Short": "dump go commands",
            "Long": "",
            "Flags": null,
            "CustomFlags": false,
            "Commands": null
        }
    ]
}
